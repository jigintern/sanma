[{"datePublished":"2018-12-16T11:10:22Z","dateModified":"2020-01-28T03:00:26Z","headline":"3分で分かるreact nativeのLayout animation","articleBody":"react-native使うとアニメーション大変なんじゃない？と言われたのでメモ\n\n\n\nreact nativeには二種類のアニメーションのAPIがある。\nAnimated API = 複雑なアニメーション向け\nLayoutAnimation API　= 簡単なアニメーションをお手軽に実装\nIOS出身の人でも3分でアニメーション出来るよ！LayoutAnimationを使えばね。\n\n\nLayoutAnimationの使い方\n\nLayoutAnimationはとても簡単。\nsetStateの上に1行書くだけ！！！\nstateの変化を検知すると、自動的にアニメーションを追加してくれる。\n\nつまり以下のように、クラスメソッドの中のsetStateの上に一行追加するだけで良い。\n\nonPressButton = () => {\n  LayoutAnimation.spring()\n  this.setState({boxHeight: 100})  \n}\n\n\nandroidで使うときは以下をコードの上の方に加える必要がある。\n\nimport { NativeModules } from 'react-native'\nconst { UIManager } = NativeModules;\nUIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n\n\n\n何を言っているのかわからないと思うので、実際の例を見てみる。\n\n前提として、reactはstyleの値をstateで管理することが出来る。\nアニメーションを使わないと、以下のようにカクついた動きになる。\n\n\n\nボタンを押すと赤いboxのheightとwidthがsetStateで更新される。\n\nexport default class App extends React.Component {\n  state = {\n    w: 100,\n    h: 100,\n  }\n\n  _onPress = () => {\n    this.setState({ w: this.state.w + 15, h: this.state.h + 15 })\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={[styles.box, { width: this.state.w, height: this.state.h }]} />\n        <TouchableOpacity onPress={this._onPress}>\n          <View style={styles.button}>\n            <Text style={styles.buttonText}>Press me!</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n    )\n  }\n}\n\n\n\nspring\n\nそれではアニメーションをしてみましょう。\nsetStateしているメソッドに1行足してください。\nspringはバネのようなアニメーションを実行します。\n\n  _onPress = () => {\n    LayoutAnimation.spring()\n    this.setState({ w: this.state.w + 15, h: this.state.h + 15 })\n  }\n\n\n\n\n\nAnimationの種類\n\nLayoutAnimationには、標準で三種類のアニメーションが用意されています。\n1. spring バネのようにバウンス（弾むようなアニメーション）\n2. EaseInEaseOut　加速減速がある、自然なアニメーション（日本のアニメで多用される）（）￥\n3. Liner　直線的な加速のアニメーション\n\n使い方は、それぞれ、\n\nLayoutAnimation.spring()\nLayoutAnimation.easeInEaseOut()\nLayoutAnimation.Liner()\n\n\nをsetStateの上に置くだけです。\n\n\nEaseInEaseOutの例\n\n加速と減速がわかるでしょうか？アニメーションのスタートに加速し、終わりに減速しています。\n\n\n\nアニメーションを微調整したい時\n\nLayoutAnimationには、configureNextというメソッドがあるので、それに色々、configを渡しましょう。\nLayoutAnimation.configureNext()に、duration, create, update, deleteをプロパティとして持つJSONを渡すことで、カスタムアニメーションを作ることが出来ます。\nduration = アニメーションの時間\n\nconst CustomLayoutSpring = {\n  duration: 1000,\n  create: {\n    type: LayoutAnimation.Types.spring,\n    property: LayoutAnimation.Properties.scaleXY,\n    springDamping: 0.7,\n  },\n  update: {\n    type: LayoutAnimation.Types.spring,\n    springDamping: 0.7,\n  },\n}\n\n...\n  _onPress = () => {\n    LayoutAnimation.configureNext(CustomLayoutSpring)\n    this.setState({ w: this.state.w + 15, h: this.state.h + 15 })\n  }\n\n\n\nアニメーションが終了した時に、メソッドを呼びたい\n\n以下のように第二引数に関数を渡す事が出来ます。\n渡された関数は、アニメーション終了後に呼ばれます。\nこれを利用し、あるアニメーションが終了してから新しいアニメーションを開始するということも可能です。\n\nLayoutAnimation.spring(console.log('AAA'))\nLayoutAnimation.configureNext(CustomLayoutSpring, console.log('AAA'))\n\n\nお手軽にアニメーションを微調整できます。\nいい時代になりましたねー。\n\n\nもっと詳しく\n\nLayoutAnimationの細かい実装は直接コードを読んでと公式が言っていますよー\ngithub上のソースコード\n\nリッチなアニメーションでユーザーに感動と便利を与えたいですね。\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F183835%2Fprofile-images%2F1523083047?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=de9e97dd619bd05b33b198597c5b6200","name":"/kaba"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F183835%2Fprofile-images%2F1523083047?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=de9e97dd619bd05b33b198597c5b6200","name":"/kaba","url":"https://qiita.com//kaba/items/d2fb7b22822f7add19a3"},{"datePublished":"2018-12-11T10:43:25Z","dateModified":"2019-05-03T00:53:07Z","headline":"3分で分かった気になれるJDK12","articleBody":"Java Advent Calendar 2018 14日目の記事です。\nJDK12が来年リリースされる予定なので、12の変更内容について一部紹介します。\n\n\nFeatures\n\nJDK12に含まれるJEP(JDK Enhancement Proposal)は以下\n2018/12/6時点\n\n89: Shenandoah: A Low-Pause-Time Garbage Collector\n  (Experimental)\n230: Microbenchmark Suite\n325: Switch Expressions (Preview)\n326: Raw String Literals (Preview)　　←JDK12からdropされるかも（2018/12/14更新）\n334: JVM Constants API\n340: One AArch64 Port, Not Two\n341: Default CDS Archives\n344: Abortable Mixed Collections for G1\n346: Promptly Return Unused Committed Memory from G1\n\nhttps://openjdk.java.net/projects/jdk/12/\n\n本記事ではJava構文に関する変更で多くのJavaプログラマーにとって影響のある２つ\n\n\n「325: Switch Expressions (Preview)」\n「326: Raw String Literals (Preview)」\n\n\nについて解説する。\n\n\nJEP325: Switch Expressions (Preview)\n\nProject Amberの一仕様である。Javaのswitch構文の表現を少し改善するもの。\n\n今までのswitch構文は、break文の出現順に依存していたため直感的ではなく、それが潜在バグの元にもなってきた。\n\n//今までのswitch文\nswitch (day) {\n    case MONDAY:\n    case FRIDAY:\n    case SUNDAY:\n        System.out.println(6);\n        break;\n    case TUESDAY:\n        System.out.println(7);\n        break;\n    case THURSDAY:\n    case SATURDAY:\n        System.out.println(8);\n        break;\n    case WEDNESDAY:\n        System.out.println(9);\n        break;\n}\n\n\n以下は改善されたswitch文\n\n//改善されたswitch文\nswitch (day) {\n    case MONDAY, FRIDAY, SUNDAY -> System.out.println(6);\n    case TUESDAY                -> System.out.println(7);\n    case THURSDAY, SATURDAY     -> System.out.println(8);\n    case WEDNESDAY              -> System.out.println(9);\n}\n\n\n\ncaseのラベルが複数書ける\n->でラムダ式のように書ける\nbreak文が不要\n\n\nかなりスッキリ\n\n\n変数への代入ケース\n\nswitch文でよくあるケースとして変数への代入がある。\n\n//今までのswitch文\nint numLetters;\nswitch (day) {\n    case MONDAY:\n    case FRIDAY:\n    case SUNDAY:\n        numLetters = 6;\n        break;\n    case TUESDAY:\n        numLetters = 7;\n        break;\n    case THURSDAY:\n    case SATURDAY:\n        numLetters = 8;\n        break;\n    case WEDNESDAY:\n        numLetters = 9;\n        break;\n    default:\n        throw new IllegalStateException(\"Wat: \" + day);\n}\n\n\nいちいち各case内で代入処理を書いているが、これが以下のように書ける。\n\n//改善されたswitch文\nint numLetters = switch (day) {\n    case MONDAY, FRIDAY, SUNDAY -> 6;\n    case TUESDAY                -> 7;\n    case THURSDAY, SATURDAY     -> 8;\n    case WEDNESDAY              -> 9;\n};\n\n\nあと、こんな書き方もできる。\n\nint numLetters = switch (day) {\n    case MONDAY, FRIDAY, SUNDAY: break 6;\n    case TUESDAY:                break 7;\n    case THURSDAY, SATURDAY:     break 8;\n    case WEDNESDAY:              break 9;\n};\n\n\n\nエラーパターン\n\nいくつか気をつけること\n\nケース１\n\nfinal int num = 3;\nString str = switch(num) {\n    case 1 -> \"one\";\n    case 2 -> \"two\";\n};\n\n\nこの書き方はコンパイルエラーになる。\nエラーメッセージは「the switch expression does not cover all possible input values」\nつまり、switchの引数が取りうる値は全てswitchの条件分岐としてカバーしろよ！ということ。\n\nこの場合は、intの取りうる値を全てcaseに書けば解決(てバカ\nではなく、defaultを書いておけばビルド成功します。\n\nfinal int num = 3;\nString str = switch(num) {\n    case 1 -> \"one\";\n    case 2 -> \"two\";\n    default -> \"non\";\n};\n\n\nケース２\n\nfinal int num = 3;\nString str = switch(num) {\n    case 1: break \"one\";\n    case 2 -> \"two\";\n    default -> \"non\";\n};\n\n\nこれもコンパイルエラーになる。\nエラーメッセージは「different case kinds used in the switch」\n書き方を統一しろや！てこと。\n\n\n326: Raw String Literals (Preview)\n\n文字列リテラルの表現がシンプルになる。\nURLパスや正規表現、複数行文字列をソースコード内に書くとき、今まではいちいちエスケープしたり改行入れたりして生産性も可読性も落ちてたけど、そんな煩わしさから解放される。\n\n「\"(ダブルクォート)」ではなく、「`(バッククォート)」で文字列を囲む。\n\nファイルパスの例\n\nRuntime.getRuntime().exec(\"\\\"C:\\\\Program Files\\\\foo\\\" bar\");\nRuntime.getRuntime().exec(`\"C:\\Program Files\\foo\" bar`);\n\n\n正規表現の例\n\nSystem.out.println(\"this\".matches(\"\\\\w\\\\w\\\\w\\\\w\"));\nSystem.out.println(\"this\".matches(`\\w\\w\\w\\w`));\n\n\n複数行の例\n\nString html = \"<html>\\n\" +\n              \"    <body>\\n\" +\n              \"         <p>Hello World.</p>\\n\" +\n              \"    </body>\\n\" +\n              \"</html>\\n\";\nString html = `<html>\n                  　　<body>\n                       <p>Hello World.</p>\n                   </body>\n               </html>\n              `;\n\n\n\n最後に\n\nどちらもPreviewステータスなので、今後変更が入ることもあるかもしれませんし、実際の本番（業務）で使えるのはJDK13以降になると思います。なのでJDK12では触れて遊ぶ程度に楽しんでください。\nあと、コンパイルと実行時には「--enable-preview」オプションをつけないとエラーになります。\n","author":{"http://schema.org/Person":{"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/404a2c9e0d0154b97c35f0223f1e513c3997a154/original.jpg?1547707694","name":"/tshk_mtsys","memberOf":{"http://schema.org/Organization":{"url":"/organizations/qualysite","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/404a2c9e0d0154b97c35f0223f1e513c3997a154/original.jpg?1547707694","legalName":"クオリサイトテクノロジーズ株式会社","description":"地方を拠点とし、成長への意欲と技術力を高め続けるプロフェッショナル集団"}},"url":"/organizations/qualysite","legalName":"クオリサイトテクノロジーズ株式会社","description":"地方を拠点とし、成長への意欲と技術力を高め続けるプロフェッショナル集団"}},"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/404a2c9e0d0154b97c35f0223f1e513c3997a154/original.jpg?1547707694","name":"/tshk_mtsys","memberOf":{"http://schema.org/Organization":{"url":"/organizations/qualysite","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/404a2c9e0d0154b97c35f0223f1e513c3997a154/original.jpg?1547707694","legalName":"クオリサイトテクノロジーズ株式会社","description":"地方を拠点とし、成長への意欲と技術力を高め続けるプロフェッショナル集団"}},"url":"https://qiita.com//tshk_mtsys/items/03177c7d00c50c8c3789","legalName":"クオリサイトテクノロジーズ株式会社","description":"地方を拠点とし、成長への意欲と技術力を高め続けるプロフェッショナル集団"},{"datePublished":"2018-04-23T16:48:40Z","dateModified":"2018-04-24T07:33:41Z","headline":"3分で分かる！ONNXフォーマットとWindows Machine Learning！","articleBody":"最近何かと耳にするようになってきた「ONNX」。\nWebの記事とかで見るんだけど「DeepLearningとかで使われてるアレでしょ？」「そもそもどう読むか分からない」という人のためにONNXがどういったものなのか、Windows Machine Learningとどう関係してくるのかを3分で分かるくらいの分量でまとめようと思います。\n\nさくっと結論から見たい方はこちらから\nつまりWindows10上でWindowsMLを使って機械学習するにはどうすればいいの？\n\n\n想定読者\n\nDeepLearning界隈の動向を追っているような方々は対象にしていません。\nもともとこの記事を書こうと思ったきっかけが、Hololens界隈でWindows Machine Learningが話題になっているけどONNXに関する情報が少ないなーと思ったことです。\nなので、日頃からDeepLearningに触れているわけではなく、特にHololensとかUWP界隈にいる人達向けの解説となります。\n\n\nONNXとは？\n\n\n公式ページ\n\nONNXはOpen Neural Network eXchangeの略で、DeepLearningモデルを様々なフレームワーク間で交換するためのフォーマットです。\nこれを使えばあるDeepLearningフレームワークで学習させたモデルを他のフレームワークでも利用することができます。DeepLearningフレームワーク戦国時代には嬉しい仕組みです。\nちなみにONNXは「オニキス」と発音します。\n\n\nONNXフォーマットの対応状況\n\n\n公式のGithub\n\nこちらが2018年4月の段階での各種DeepLearningフレームワークのONNXフォーマットの対応状況です。\nONNXフォーマットを扱う上で注意しなくてはならない点が2つあります。\n\n\n注意1:各フレームワーク間でのExport/Import\n\n図の中にいろいろ見知らぬフレームワークの名前がありますが、大切なのは全てのフレームワークで相互変換が可能なわけではないということです。\n図を見ても分かる通り、各フレームワークでExport/Importの対応状況に差があり、例えばChainerで学習させたモデルをPyTorchに持ち込むということはできません。\n\n\n注意2:各フレームワークのパーツレベルでの対応\n\nまたもうひとつ注意しなくてはならないのが、各フレームワークが一部のDeepLearnigモデルのパーツ(関数)のExport/Importに対応していないということです。\n少しややこしい話になりますが、ONNXの仕様上は存在しているがフレームワーク側でまだ対応できていないといったパーツが存在します。\n特定のフレームワークのモデルをONNXフォーマットでExport/Importする場合、モデルのパーツ全てがそのフレームワークで対応している必要があります。\nPyTrochを例に出すと、こちらのページにあるパーツがPyTorchが対応しているパーツですが、この中にLSTMといったパーツは存在しておらずこれを含むモデルはONNXフォーマットでExportすることができません。\n\nそのため、フレームワークがONNXフォーマットに対応しているからといって全てのモデルをExport/Importできるわけではないということに注意してください。\n\n(余談: ONNX公式の仕様にはLSTMといったパーツも含まれているため、いずれ対応されると思います。)\n\n\nWindows Machine Learningとは\n\n\n公式\n\nWindows Machine Learning(Windows ML)はWindows10デバイス上で機械学習を行うためのAPIを提供するプラットフォームです。\nこれを使えば、Windows10上での機械学習のコードをC#を使ってさくっと書くことができるようになります。\n重要なのはONNXフォーマットのモデルを読み込んで推論(予測)を行う機能が用意されていることです。\n\n\nwinmltoolsを使えばCoreMLなどのモデルも取り込める\n\nwinmltoolsはMicrosoftが公式で出しているWindows ML向けのtoolで、これを使えばCoreMLやScikit-learnといった機械学習フレームワークのモデルをWindows MLが読み込めるONNXフォーマットに変換して保存することができます。\n(CoreMLはDeepLearningフレームワークの1種です)\n\n# coremltoolsはCoreMLモデルを扱うtool\nfrom coremltools.models.utils import load_spec\nfrom winmltools import convert_coreml\nfrom winmltools.utils import save_model, save_text\n\n# CoreMLモデルのロード\nmodel_coreml = load_spec(\"MobileNet.mlmodel\")\n# CoreMLモデルをONNXモデルに変換\nmodel_onnx = convert_coreml(model_coreml, name=\"mobilenet\")\n\n# モデルをONNXフォーマットのバイナリモデルとテキストで保存する\nsave_model(model_onnx, \"Mobilenet.onnx\")\nsave_text(model_onnx, \"Mobilenet.txt\")\n\n\n\nつまりWindows10上でWindowsMLを使って機械学習するにはどうすればいいの？\n\n結局のところ、機械学習モデルをONNXフォーマットで用意できれば後はWindows MLで読み込んでAPIを使って推論を行えます。\nそのため機械学習モデルを\n\n\nWindows ML上で学習\n各種DeepLearningライブラリでモデルを学習させONNXフォーマットでExport\n公開されている機械学習モデルをwinmltoolsで変換したり、各種フレームワークでExport\n\n\nといった手段で用意することが考えられます。\n\n2や3で各フレームワークで学習済みのモデルをExportする際には、こちらで書いたように各フレームワークがそのモデルの全てのパーツに対してExportに対応しているかどうかが鍵になります。どんなモデルでもONNXフォーマットに変換できるわけではありません。\n3. に関してはModel Zooといって学習済みモデルを公開する場所がいくつかあり、そこから良さそうなモデルを探してきてwinmltoolsで変換するのが良いでしょう。\n\n\n\nONNX Models: ONNXの学習済みモデルを配布している\n\nCore ML Store: CoreMLの学習済みモデルを配布している\n\n\n\nおまけ\n\n3のパターンとして、CoreMLの学習済みモデルが公開されているMobileNetを使ってリアルタイムに画像認識を行うアプリを作ったので参考までにどうぞ\nhttps://github.com/ymym3412/WindowsML-CoreML-MobileNet-demo\n\nやり方やコードはこちらの記事のものをほぼ流用させて頂きました。ありがとうございました。\nCustom Vision Serviceから出力したモデルを使ってWindowsML上で物体認識をする（その１　AIモデルの作成と出力）\n\n\n参考文献\n\nONNX公式\nGithub: ONNX/ONNX\nWindows Machine Learning\nGithub: Microsoft/Windows-Machine-Learning\nCustom Vision Serviceから出力したモデルを使ってWindowsML上で物体認識をする（その１　AIモデルの作成と出力）\nHoloLensでWindowsMLを試してみる(サンプル実行編)\n","author":{"http://schema.org/Person":{"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/7e6c946943cf96bc0599bc9c3f9e81624524da7e/original.jpg?1441965104","name":"/ymym3412","memberOf":{"http://schema.org/Organization":{"url":"/organizations/recruitlifestyle","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/7e6c946943cf96bc0599bc9c3f9e81624524da7e/original.jpg?1441965104","legalName":"株式会社リクルートライフスタイル","description":"飲食・美容・旅行領域の情報サイトや『Airレジ』などの業務支援サービスなど、日常消費領域に関わるサービスの提供するリクルートグループの中核企業"}},"url":"/organizations/recruitlifestyle","legalName":"株式会社リクルートライフスタイル","description":"飲食・美容・旅行領域の情報サイトや『Airレジ』などの業務支援サービスなど、日常消費領域に関わるサービスの提供するリクルートグループの中核企業"}},"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/7e6c946943cf96bc0599bc9c3f9e81624524da7e/original.jpg?1441965104","name":"/ymym3412","memberOf":{"http://schema.org/Organization":{"url":"/organizations/recruitlifestyle","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/7e6c946943cf96bc0599bc9c3f9e81624524da7e/original.jpg?1441965104","legalName":"株式会社リクルートライフスタイル","description":"飲食・美容・旅行領域の情報サイトや『Airレジ』などの業務支援サービスなど、日常消費領域に関わるサービスの提供するリクルートグループの中核企業"}},"url":"https://qiita.com//ymym3412/items/05a7cecf81309a3f131e","legalName":"株式会社リクルートライフスタイル","description":"飲食・美容・旅行領域の情報サイトや『Airレジ』などの業務支援サービスなど、日常消費領域に関わるサービスの提供するリクルートグループの中核企業"},{"datePublished":"2018-04-09T04:55:23Z","headline":"３分で分かるReactNativeへのFlow導入","articleBody":"ReactNativeには最初から.flowConfigが存在している。\nよって、Flowの導入は素早く終わる。\nそれでは始めよう\n\n\n.flowConfigを開き、最下部のversion numberをチェック。（仮に0.61.0だとする）\nターミナルでyarn add --dev flow-bin@0.61.0 babel-preset-flow\n.babelrcに\n\n\n{\n  \"presets\": [\"react-native\", \"flow\"]\n}\n\n\nを追加\n\n終\n\n最後に、使いやすくするための２つのスクリプトを追加しよう。\npackage.jsonを開き、\n\n\"scripts\": {\n  \"flow\": \"flow\",\n  \"flow-stop\": \"flow stop\",\n}\n\n\nただこのままではnode_module以下もFlowがチェックしてしまうので、.flowconfigに\n\n[ignore]\n.*/node_modules/.*\n\n\nを付け足す\n\nまたimport {...} from 'react-native'の箇所でエラーが出るので、\n1. flow-typedフォルダを作る\n$ mkdir flow-typed\n2. ファイルを加える\n$ touch react-native.js\n3. react-native.jsに以下を書き加える\n\ndeclare module 'react-native'{declare module.exports: any;}\n\n\nこれで全てが完了した。\nおめでとう。\n\n一つ注意として、\nclass App extends Component {\nと書くと\nComponentには少なくとも一つの引数が必要だと怒られるので\nclass App extends Component<{}> {\nと書こう\n\nこのままではImageを使うとエラーが出るので、\n\nmodule.name_mapper='^[./a-zA-Z0-9$_-]+\\.\\(bmp\\|gif\\|jpg\\|jpeg\\|png\\|psd\\|svg\\|webp\\|m4v\\|mov\\|mp4\\|mpeg\\|mpg\\|webm\\|aac\\|aiff\\|caf\\|m4a\\|mp3\\|wav\\|html\\|pdf\\)$' -> 'RelativeImageStub'\n\n\nに以下のようにコードを足す\n\nmodule.name_mapper='^image![a-zA-Z0-9$_-]+$' -> 'GlobalImageStub'\nmodule.name_mapper='^[./a-zA-Z0-9$_-]+\\.\\(bmp\\|gif\\|jpg\\|jpeg\\|png\\|psd\\|svg\\|webp\\|m4v\\|mov\\|mp4\\|mpeg\\|mpg\\|webm\\|aac\\|aiff\\|caf\\|m4a\\|mp3\\|wav\\|html\\|pdf\\)$' -> 'RelativeImageStub'\n\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F183835%2Fprofile-images%2F1523083047?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=de9e97dd619bd05b33b198597c5b6200","name":"/kaba"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F183835%2Fprofile-images%2F1523083047?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=de9e97dd619bd05b33b198597c5b6200","name":"/kaba","url":"https://qiita.com//kaba/items/bf41bc7eca4335803abf"},{"datePublished":"2017-11-19T08:15:48Z","dateModified":"2017-12-28T07:37:21Z","headline":"3分で分かる C# 6 の新機能","articleBody":"What's New in C# 6、New Language Features in C# 6 をベースに、C# 5 と比較してコードがどう変わるのかを、主な機能に絞って記載しています。\n\n\n1. 自動プロパティの機能強化 (Auto-Property enhancements)\n\n\n\n自動プロパティの初期化子 (Auto-Property initializers)\n\n\nold\npublic class Customer {\n    public Customer() {\n        First = \"Jane\";\n        Last = \"Doe\";\n    }\n\n    public string First { get; set; }\n    public string Last { get; set; }\n}\n\n\n\n\n\n\nnew!\npublic class Customer {\n    public string First { get; set; } = \"Jane\";\n    public string Last { get; set; } = \"Doe\";\n}\n\n\n\n\n読み取り専用の自動プロパティ (Read-only auto-properties)\n\n\nold\npublic class Customer {\n    private readonly string _name;\n\n    public Customer(string name) {\n        _name = name;\n    }\n\n    public string Name { get { return _name; } }\n}\n\n\n\n\n\n\nnew!\npublic class Customer {\n    public Customer(string name) {\n        Name = name;\n    }\n\n    public string Name { get; }\n}\n\n\n\n\n2. 式形式のメンバー (Expression-bodied function members)\n\n\n\n式形式のメソッド (Expression bodies on method-like members)\n\n\nold\npublic void Print() {\n    Console.WriteLine(First + \" \" + Last);\n}\n\n\n\n\n\n\nnew!\npublic void Print() => Console.WriteLine(First + \" \" + Last);\n\n\n\n\n式形式のプロパティ (Expression bodies on property-like function members)\n\n\nold\npublic string Name {\n    get {\n        return First + \" \" + Last;\n    }\n}\n\n\n\n\n\n\nnew!\npublic string Name => First + \" \" + Last;\n\n\n\n\n3. using static\n\n\n\nold\nusing System;\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(Math.Sqrt(3*3 + 4*4)); \n        Console.WriteLine(DayOfWeek.Friday - DayOfWeek.Monday); \n    }\n}\n\n\n\n\n\n\nnew!\nusing static System.Console;\nusing static System.Math;\nusing static System.DayOfWeek;\n\nclass Program {\n    static void Main() {\n        WriteLine(Sqrt(3*3 + 4*4)); \n        WriteLine(Friday - Monday); \n    }\n}\n\n\n\n\n4. Null 条件演算子 (Null-conditional operators)\n\n\n\nold\nvar handler = PropertyChanged;\nif (handler != null) {\n    handler(this, args);\n}\n\n\n\n\n\n\nnew!\nPropertyChanged?.Invoke(this, args);\n\n\n\n\n5. 文字列補間 (String interpolation)\n\n\n\nold\nvar s = String.Format(\"{0,20} is {1:D3} year{2} old\", p.Name, p.Age, (p.Age == 1 ? \"\" : \"s\"));\n\n\n\n\n\n\nnew!\nvar s = $\"{p.Name,20} is {p.Age:D3} year{(p.Age == 1 ? \"\" : \"s\")} old\";\n\n\n\n\n6. nameof 式 (nameof Expressions)\n\n\n\nold\nif (x == null) throw new ArgumentNullException(\"x\");\n\n\n\n\n\n\nnew!\nif (x == null) throw new ArgumentNullException(nameof(x));\n\n\n\n\n7. インデックス初期化子 (Index initializers)\n\n\n\nold\nvar numbers = new Dictionary<int, string> {\n    {7, \"seven\"},\n    {9, \"nine\"},\n    {13, \"thirteen\"},\n};\n\n\n\n\n\n\nnew!\nvar numbers = new Dictionary<int, string> {\n    [7] = \"seven\",\n    [9] = \"nine\",\n    [13] = \"thirteen\",\n};\n\n\n\n\n8. 例外フィルター (Exception filters)\n\n\n\nold\ntry { … }\ncatch (MyException e) {\n    if (myfilter(e)) {\n        …\n    }\n}\n\n\n\n\n\n\nnew!\ntry { … }\ncatch (MyException e) when (myfilter(e)) {\n    …\n}\n\n\n\n\n9. catch / finally ブロックでの await (Await in catch and finally blocks)\n\n\n\nold\nResource res = null;\ntry {\n    res = await Resource.OpenAsync(…);\n    …\n} \ncatch(ResourceException e) {\n    Resource.LogAsync(res, e).Wait();\n}\nfinally {\n    if (res != null) {\n        res.CloseAsync().Wait();\n    }\n}\n\n\n\n\n\n\nnew!\nResource res = null;\ntry {\n    res = await Resource.OpenAsync(…);\n    …\n} \ncatch(ResourceException e) {\n    await Resource.LogAsync(res, e);\n}\nfinally {\n    if (res != null) {\n        await res.CloseAsync();\n    }\n}\n\n\n\n\nFor more information\n\n\nNew Language Features in C# 6 · dotnet/roslyn Wiki\nWhat's New in C# 6 - C# Guide | Microsoft Docs\nC# 6 の新機能 - C# によるプログラミング入門 | ++C++; // 未確認飛行 C\n\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F115867%2Fprofile-images%2F1539881099?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=044adbc49b1d765c2d0e13e9d5ac3f6c","name":"/inasync"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F115867%2Fprofile-images%2F1539881099?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=044adbc49b1d765c2d0e13e9d5ac3f6c","name":"/inasync","url":"https://qiita.com//inasync/items/c653d7a952a873fef8b0"},{"datePublished":"2015-04-17T06:28:53Z","dateModified":"2015-05-21T06:52:08Z","headline":"3分で分かる Erlang hot code loading","articleBody":"安っぽいタイトルを付けてしまい大変申し訳ありません。\n\nHot code loading とは、データはそのままでコードだけ最新のやつに差し替える Erlang VM の機能です。\nうまくやると無停止で運用できるので嬉しかったりしますが、ちゃんとわかって使わないと謎の挙動に苦しむことになるのでちょっと調べてみました。\n\n\n概要\n\nまずは 公式ドキュメント を見て、一部動作を予想しつつまとめてみました。最低限、これだけ覚えておけば勝つる。\n\n■関数の実体\nある関数の実体が所属する世界は current, old の２種類ある.\n\n■関数の実体の解決方法\n「Fully qualified function calls」や「Fully qualified functionが入った変数」は常に current のやつを指す.\nそうでないものは現在実行中の関数が所属する世界のやつを指す.\n\n■コード更新時の処理\n初回起動時は全ての関数が current に配置される.\ncode update すると,\n1. stack frame 中に「old に所属する関数」が１個でも存在するプロセスは kill される. (ここは doc では明記されていない)\n2. current に所属する関数の実体がすべて old に移動される.\n3. current に新しい関数がロードされる.\n\n\n(↑ここまでで 3 分のつもり)\n\nというわけでこれを確かめるべく、いくつか試してみます。結論としては「上記が確かめられた」です。\n(注意: 試してOKだったとしても証明されたわけではないので、厳密に確かめるなら erlang のソースを追っていくと良いと思います。どなたかに期待。)\n\n\nやってみた\n\nhot code loading の動作確認をするちょっとしたコードを書いてみました。\n\n基本的には、reload/1 というコード更新をする関数を用意し、いろんな関数でループを書きながら reload/1 を呼んで挙動を見る、という流れになっています。\n\nさっそく、結果です。\n\nerl -boot start_clean -eval 't:a(3).' -s init stop\nEshell V6.3  (abort with ^G)\n1> {\"a() - fully qualified call -> OK\",3,\n [\"t:stacktrace/0\",\"t:a/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"a() - fully qualified call -> OK\",2,\n [\"t:stacktrace/0\",\"t:a/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"a() - fully qualified call -> OK\",1,\n [\"t:stacktrace/0\",\"t:a/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> \n\n\n↑ a/1 内で t:a(I-1) という fully qualified な呼び出しをしています。この呼び出しは常に current にある関数を指すので何回 reload されても OK\nついでに言うと末尾再帰なので stack frame を消費しないという点もとても大事です。（後述）\n\nerl -boot start_clean -eval 't:b(3).' -s init stop\nEshell V6.3  (abort with ^G)\n1> {\"b() - not fully qualified call -> death\",3,\n [\"t:stacktrace/0\",\"t:b/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"b() - not fully qualified call -> death\",2,\n [\"t:stacktrace/0\",\"t:b/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"init terminating in do_boot\",killed}\n\nCrash dump was written to: erl_crash.dump\ninit terminating in do_boot (killed)\n\n\n↑ b/1 内で b(I-1) と fully qualified でない呼び出しをしています。この呼び出しは現在の環境を指します。\nつまり 1 回 reload されたあとは old にある b/1 が呼ばれ, 2 回 reload するときに現在の呼び出しは old に所属するので死にます。\n\nerl -boot start_clean -eval 't:ca(3).' -s init stop\nEshell V6.3  (abort with ^G)\n\"ca() - pass fully qualified fun to c0 -> OK\"\n1> {\"c0() - call Fun -> OK if Fun is fully qualified\",3,\n [\"t:stacktrace/0\",\"t:c0/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"c0() - call Fun -> OK if Fun is fully qualified\",2,\n [\"t:stacktrace/0\",\"t:c0/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"c0() - call Fun -> OK if Fun is fully qualified\",1,\n [\"t:stacktrace/0\",\"t:c0/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> \n\n\n↑ fun t:c0/2 という fully qualified な関数を c0/2 に渡して c0/2 では最後にその関数を呼ぶことでループするという例です。\nこれは常に current にある関数を指すのでOK\n\nerl -boot start_clean -eval 't:cb(3).' -s init stop\nEshell V6.3  (abort with ^G)\n\"cb() - pass not fully qualified exported fun to c0 -> death\"\n1> {\"c0() - call Fun -> OK if Fun is fully qualified\",3,\n [\"t:stacktrace/0\",\"t:c0/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"c0() - call Fun -> OK if Fun is fully qualified\",2,\n [\"t:stacktrace/0\",\"t:c0/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"c0() - call Fun -> OK if Fun is fully qualified\",1,\n [\"t:stacktrace/0\",\"t:c0/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"init terminating in do_boot\",killed}\n\nCrash dump was written to: erl_crash.dump\ninit terminating in do_boot (killed)\n\n\n↑ c0/2 は export されていますが、fun c0/2 は fully qualified じゃないので死にます。\n\nerl -boot start_clean -eval 't:cc(3).' -s init stop\nEshell V6.3  (abort with ^G)\n\"cc() - pass anonymous fun to c1 -> death\"\n1> {\"c1() [Not exported] -  call Fun -> OK if Fun is fully qualified\",3,\n [\"t:stacktrace/0\",\"t:c1/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"c1() [Not exported] -  call Fun -> OK if Fun is fully qualified\",2,\n [\"t:stacktrace/0\",\"t:c1/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"c1() [Not exported] -  call Fun -> OK if Fun is fully qualified\",1,\n [\"t:stacktrace/0\",\"t:c1/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"init terminating in do_boot\",killed}\n\nCrash dump was written to: erl_crash.dump\ninit terminating in do_boot (killed)\n\n\n↑ 匿名関数もだめよ。\n\nerl -boot start_clean -eval 't:cd(3).' -s init stop\nEshell V6.3  (abort with ^G)\n\"cd() - pass not fully qualified not exported fun to c1 -> death\"\n1> {\"c1() [Not exported] -  call Fun -> OK if Fun is fully qualified\",3,\n [\"t:stacktrace/0\",\"t:c1/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"c1() [Not exported] -  call Fun -> OK if Fun is fully qualified\",2,\n [\"t:stacktrace/0\",\"t:c1/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"c1() [Not exported] -  call Fun -> OK if Fun is fully qualified\",1,\n [\"t:stacktrace/0\",\"t:c1/2\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"init terminating in do_boot\",killed}\n\nCrash dump was written to: erl_crash.dump\ninit terminating in do_boot (killed)\n\n\n↑ fun c1/2 は fully qualified じゃないので死にます。\n\nerl -boot start_clean -eval 't:d(t, d, 3).' -s init stop\nEshell V6.3  (abort with ^G)\n1> {\"d() - fully qualified call -> OK\",3,\n [\"t:stacktrace/0\",\"t:d/3\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"d() - fully qualified call -> OK\",2,\n [\"t:stacktrace/0\",\"t:d/3\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"d() - fully qualified call -> OK\",1,\n [\"t:stacktrace/0\",\"t:d/3\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> \n\n\n↑ apply/3 を使っても大丈夫。\n\nerl -boot start_clean -eval 't:x(3).' -s init stop\nEshell V6.3  (abort with ^G)\n\"x() - will call a, consume no stack frame -> OK\"\n1> {\"a() - fully qualified call -> OK\",3,\n [\"t:stacktrace/0\",\"t:a/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"a() - fully qualified call -> OK\",2,\n [\"t:stacktrace/0\",\"t:a/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"a() - fully qualified call -> OK\",1,\n [\"t:stacktrace/0\",\"t:a/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> \n\n\n↑ x/1 → a/1 と呼ばれて a/1 でずっとループするので x は古くなって死にそうに見えますが、実は stacktrace を見ると分かるように\nt:x/1 という stack frame がありません。\ntail call なので go to に置き換えるという最適化がかかっていると思われます。\nなので死にません。お... おう。\n\nお... おう。\n\nerl -boot start_clean -eval 't:y(3).' -s init stop\nEshell V6.3  (abort with ^G)\n\"y() - will call a, consume a stack frame -> death\"\n1> {\"a() - fully qualified call -> OK\",3,\n [\"t:stacktrace/0\",\"t:a/1\",\"t:y/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"a() - fully qualified call -> OK\",2,\n [\"t:stacktrace/0\",\"t:a/1\",\"t:y/1\",\"erl_eval:do_apply/6\",\"init:start_it/1\",\n  \"init:start_em/1\"]}\n1> {\"init terminating in do_boot\",killed}\n\nCrash dump was written to: erl_crash.dump\ninit terminating in do_boot (killed)\n\n\n↑ tail call じゃなくすると... t:y/1 が stacktrace に現れました。すると y は古くなるので死にます。\n\n動作が「実際のスタックフレームがどうなっているか」に依存するので、気をつけないと思わぬ挙動に悩むことになりそうです。\n\n\nその他\n\nHot code swapping pitfalls in Erlang\n ... try-catchを使った時、末尾再帰になってるからいいやと思ってたらなってなくて死んだでござる、みたいな話もあったりするので要注意です。\n\n\nまとめ\n\nということで、「概要」と「やってみた」を書いてみましたがいかがだったでしょうか。\n\nハマりどころとしては、reload/1 内で単に code:purge/1, code:load_file/1 だけ呼んでも実際の関数本体が更新されていないと更新されない、という動作をするケースがあったので、\nダミーの timer:sleep/1 を呼んでその引数を sed で書き換えることで２種類のソースとそれに対応する .beam を用意しておいて、load 時に切り替えるという面倒なことをやるハメになってしまいました.....\n\nさてこの続きは @sile さんが書いてくれるんじゃないかなと思っています!\n\nではでは〜\n\n\n追記\n\n@sile さんが書いてくれました。\nホットコードローディング時のプロセスクラッシュについて\nどうやら、古い関数(匿名関数や完全修飾でない関数が古くなったもの)を保持しているだけでそのプロセスが死ぬようです。\n\n匿名関数や完全修飾でない関数は長期間保持するべからず、ということで。\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F75936%2Fprofile-images%2F1473700312?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=36ef03beb95a9e4cae18da4136f56533","name":"/kojingharang"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F75936%2Fprofile-images%2F1473700312?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=36ef03beb95a9e4cae18da4136f56533","name":"/kojingharang","url":"https://qiita.com//kojingharang/items/5762ed009b67b95f22e1"},{"datePublished":"2017-10-09T00:29:55Z","dateModified":"2020-01-15T08:34:58Z","headline":"3分で分かる？Android OのAdaptive Iconに対応しよう","articleBody":"DevFest Tokyo 2017の3分LTのネタです。 \nhttps://gdg-tokyo.connpass.com/event/66236/\n(もうちょっとちゃんとしたのをどこかで書くかもです。)\n\n\n\n\nAdaptive Iconに至るまで\n\nなぜ出てきたか？\n\n\nAndroid 2.xの時代\n形がバラバラなアイコンで並んでいた時代がありました。\n丸や四角、様々な形のをしたアイコンが並んでいました。\n\n\n\n\n(このためだけにエミュレーター入れました。。)\n\n\n\n\nAndroid 4.xの時代\n見た目がバラバラなのは見た目が良くないということで、\nサードパーティやメーカーのランチャーアプリがアイコンを切り抜いて表示したり、アイコンパックの配布を始めます。\n\n\n\n\nhttps://play.google.com/store/apps/details?id=com.sec.android.app.launcher\nより\n\n\n\n\nAndroid 7.1\nRound Iconが指定できるようになりました。ただ、丸だけというのは柔軟でないです。また丸く切り取られるだけで別に背景に透明を指定すればどんな形でも大丈夫でした。\n\n\n<application\n    android:icon=\"@mipmap/ic_launcher\"\n    android:roundIcon=“@mipmap/ic_launcher_round”\n\n\n\n\n\nAndroid 8.0\nAdaptive Iconが登場！制約を加えることで、柔軟に形が変えられるようになりました。\n\n\n\n\n\nAdaptive Iconとは？\n\nアイコンは2層で構成されます。\nそれを切り取られてアイコンが作られます。\nこれによりアイコンの形を一貫したものにすることができます。\n\nhttps://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive.html より\n\n\n\n二層で構成されるため、さまざまなアニメーションが可能になります。\n\n\nhttps://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive.html より\n\n\n\n\n対応するには？\n\n対応ポイント\n\n\n基本的な所を抑える\n簡単に対応するか？ちゃんと対応するか？\nサイズをどう抑えるか？\n\n\n\n\n\n基本的な所を抑える1\n\n108dp x 108dpで前面、背面の画像を作成する。\n中心から直径66dpにアイコンのコアな部分を表示する。\n\nhttps://www.youtube.com/watch?v=TB-K6OniF68 より\n\nそれ以外は切り取られる可能性がある。\n基本は今までのpng画像(48dp) + Adaptive Icon用の前面の画像、 背面の画像(108dp)を各解像度用に用意する形になります。\n\n\n\n\n基本的な所を抑える2\n\nAPI Level 26用にic_launcherを用意して、それ以外はmipmap-[]dpi/ic_launcher.pngを使うようにする。\n\n\n/res/mipmap-anydpi-v26/ic_launcher.xml\n<adaptive-icon ...>\n  <background android:drawable=\"@mipmap/ic_background\" />\n  <foreground android:drawable=\"@mipmap/ic_foreground\" />\n</adaptive-icon>\n\n\n\n\n\n\n簡単に対応する\n\n\n一番ベーシックなパターン\n簡単に対応するにはただ単に背景色 + ブランドアイコンを載せるのみ\n1時間で対応が終わるはずです。\n\n\n\n\n\nAdaptive Iconの制約を利用して対応する\n\n\nクリエイティブなカスタマイズが色々出来る\n前面にあると思わせて、背景に要素をおいておくことで、うまくアニメーションができます。\n\n\nGoogleの方のブログと共に以下のパターンが有るというのはデザイナーさんに伝えて一緒に考えるのが良さそうです。\nhttps://medium.com/google-design/designing-adaptive-icons-515af294c783\n\n\n\n\nBackground Anchoring\nMasked masks\nLight & shadows\nLeave behinds\n\n\nMasked masksの例(ロゴが前面にあると思わせて背面にあることで面白い効果が起こる)\n\nhttps://medium.com/google-design/designing-adaptive-icons-515af294c783 より\n\n\n\nデザイナーさんはこのツールにpng画像をいれることでAdaptive Iconを確認しながら進めることができます\n\n\n\n\nまたエンジニアはここからダウンロードできるapkでアプリとして動作を確認できます。\nhttps://github.com/nickbutcher/AdaptiveIconPlayground/releases\n\n\n\n\n\n\napkサイズをどう抑えるか？\n\n\n普通のアイコン\nRound Icon\nAdaptive Icon\n\n\nに対応して、mdpiからxxxhdpiを用意すると5 x 4 = 20個の画像をアイコンのために入れる必要があります。\nさらにApp Shortcutも含めるとさらに増加します。\n\nAndroid Studio 3.0 Beta7のデフォルトの画像構成\n\n\n\n\n\n\n可能であればVectorDrawableを利用する。\n\n利用することができれば解像度ごとにpng画像を用意しなくていいので、サイズの節約になります。\nAndroid Studio 3.0 Beta7のデフォルトの画像構成でもAdaptive Iconの背景にVectorDrawableを利用しています。\n\n\n\n\n\n\n\n\n背景が単色であれば単色を利用する\n\n画像を使わないことでサイズを削減できます。\n\n\n/res/mipmap-anydpi-v26/ic_launcher.xml\n<adaptive-icon ...>\n  <background android:drawable=\"@color/light_grey\" />\n  <foreground android:drawable=\"@mipmap/ic_foreground\" />\n</adaptive-icon>\n\n\n\n\n\n\nApp Shortcut(API Level 25)でVectorDrawableを使う\n\nAdaptiveIconDrawableでinsetタグを利用すればAPI Level 25と26で共通の一つのVectorDrawableで対応できます。(通常なアイコンはAPI Levelが古いのでVectorDrawable化できないが、App Shortcutはできる)\n\n\n/res/mipmap-anydpi-v26/shortcut.xml\n<adaptive-icon ...>\n  <background android:drawable=\"@color/light_grey\" />\n  <foreground>\n    <inset\n      android:drawable=\"@drawable/ic_shortcut_search_foreground\"\n      android:inset=\"9.26%\" />\n  </foreground>\n</adaptive-icon>\n\n\n\n\n\n\nRound Iconのv26以降向けのAdaptive IconはランチャーアイコンのAdaptive Iconと同じリソースを使う\n\nRound IconのAdaptive Iconの対応として以下で対応できます。\n※これをしても、API Level 25向けに 結局ic_launcher_round.pngが必要です\n\n<application\n    android:icon=\"@mipmap/ic_launcher\"\n    android:roundIcon=“@mipmap/ic_launcher_round”\n\n\n\n/res/mipmap-anydpi-v26/ic_launcher_round.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <background android:drawable=\"@drawable/ic_launcher_background\" />\n    <foreground android:drawable=\"@mipmap/ic_launcher_foreground\" />\n</adaptive-icon>\n\n\n\n\n\n\nアイコンを丸くしてしまう\n\npngの画像がアイコンが丸く切り取られることが許容できない場合はAndroid 7.1用にRound Iconを用意する必要があります。\nこれに対して、自分だとこの発想が出てこなかったのですが、根本のアイコンごと丸くしてしまう方法があります。\nそうすればroundIconも普通のIconもAdaptiveIconも基本的に同じデザインを適応することができます。\n\n\nAndroidManifest.xml\n<application\n    android:icon=\"@mipmap/ic_launcher\"\n    android:roundIcon=\"@mipmap/ic_launcher\"\n\n\n\n\n\n\nハマリポイント\n\n\n現在launcher iconにxmlを指定するとlintでエラーが出るので、エラーが出たらSuppressしておくと良さそう( http://crbug.com/739746 情報が少ない。。)\n\n\nこちらAndroid Gradle Plugin 3.0では起きないっぽいです。\n\n\n\n\nまとめ\n\nまずはデザイナーさんにAdaptive Iconをシェアして興味あるか聞いてみよう(自分の場合はデザイナーさんから言っていただけました。  )\nAPKサイズを小さくするテクニックは色々あるので、それを使っていこう。\n\n\n\n\n参考資料\n\nhttps://www.youtube.com/watch?v=TB-K6OniF68\nhttps://medium.com/google-design/understanding-android-adaptive-icons-cee8a9de93e2\nhttps://medium.com/google-design/designing-adaptive-icons-515af294c783\nhttps://medium.com/google-developers/implementing-adaptive-icons-1e4d1795470e\n","author":{"http://schema.org/Person":{"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/dd2ac37e66b5085378accf6404d23ff3c6839964/original.jpg?1444363847","name":"/takahirom","memberOf":{"http://schema.org/Organization":{"url":"/organizations/cyberagent","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/dd2ac37e66b5085378accf6404d23ff3c6839964/original.jpg?1444363847","legalName":"株式会社サイバーエージェント","description":"サイバーエージェントは「21世紀を代表する会社を創る」をビジョンに掲げ、インターネットテレビ局「AbemaTV」の運営や国内トップシェアを誇るインターネット広告事業を展開しています。インターネット産業の変化に合わせ新規事業を生み出しながら事業拡大を続けています。"}},"url":"/organizations/cyberagent","legalName":"株式会社サイバーエージェント","description":"サイバーエージェントは「21世紀を代表する会社を創る」をビジョンに掲げ、インターネットテレビ局「AbemaTV」の運営や国内トップシェアを誇るインターネット広告事業を展開しています。インターネット産業の変化に合わせ新規事業を生み出しながら事業拡大を続けています。"}},"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/dd2ac37e66b5085378accf6404d23ff3c6839964/original.jpg?1444363847","name":"/takahirom","memberOf":{"http://schema.org/Organization":{"url":"/organizations/cyberagent","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/dd2ac37e66b5085378accf6404d23ff3c6839964/original.jpg?1444363847","legalName":"株式会社サイバーエージェント","description":"サイバーエージェントは「21世紀を代表する会社を創る」をビジョンに掲げ、インターネットテレビ局「AbemaTV」の運営や国内トップシェアを誇るインターネット広告事業を展開しています。インターネット産業の変化に合わせ新規事業を生み出しながら事業拡大を続けています。"}},"url":"https://qiita.com//takahirom/items/696fb5ecaa230fa8f755","legalName":"株式会社サイバーエージェント","description":"サイバーエージェントは「21世紀を代表する会社を創る」をビジョンに掲げ、インターネットテレビ局「AbemaTV」の運営や国内トップシェアを誇るインターネット広告事業を展開しています。インターネット産業の変化に合わせ新規事業を生み出しながら事業拡大を続けています。"},{"datePublished":"2020-03-14T06:18:39Z","headline":"3分で分かる。MERNスタックを簡単に説明してみる","articleBody":"MERNスタックの仕組みと、参考になるチュートリアルを提供する記事です。本当に重要な部分のみを扱いました。\n\n\nMERNスタックとは\n\nMongoDB, Express, React.js, Node.jsの4つを使ったソフトウェアハンドル。Webアプリ開発に用いられる。仮に、React.jsではなく、Angular.jsを使う場合、MEANスタックとなる。\n\nMongoDB:ドキュメント志向のNo-SQLデータベース。データの保存などに使う。DBは、データベースの意。\nExpressJS:Node.jsのフレームワーク。Node.jsの機能と一緒に使う事で、バックエンドの構築が出来る。\nReactJS:単一ページWebアプリのUIを作成するUIコンポーネントを構築出来る。アプリケーションのView部分を担っている。\nNodeJS:サーバーサイドでも動くjavascriptってカッコイイし楽だよね、と覚えておこう。\n\n\n何が良いのか\n\nフルスタックエンジニアを名乗りたい人は、実はjavascriptが書ける時点で完結できてしまう。企業側から捉えると、サーバーサイドエンジニアの人手が足りなくても、開発案件がMERN構築で可能な場合、フロントエンドエンジニアをそのままサーバーサイドに。というアサインも可能かもしれない。\n\n\n実際の中身\n\n\n\nユーザーは、アプリケーションのView（UI部分)と繋がっている。ReactとExpressはどちらもNode.jsで作成されている。この2つのコンポーネントは、RESTful APIを経由して通信している。\n\n例）データを送信したいと思い、送信ボタンをクリックした場合：\nクライアントPC\n→ReactJSを経由\n→NodeJSベースのExpressサーバーに送信\n→MongoDB\n\nにいく。\n\n例）データを取得したいと思い、ボタンをクリックした場合；\nMongoDB\n→NodeJSベースのExpressサーバーに送信\n→ReactJSを経由\n→クライアントPC\n\nにいく。\n\n\nMERNスタックを構築してみたい、という方へ\n\n実際にどんなTutorialがあるか調べてみました。\n\nLearn the MERN Stack - Full Tutorial (MongoDB, Express, React, Node.js)\nhttps://www.youtube.com/watch?v=7CqJlxBYj-M\n英語だけど、一番簡単なMERNアプリを作っている気がします。\n\nThe MERN Stack Tutorial – Building A React CRUD Application From Start To Finish\nhttps://codingthesmartway.com/the-mern-stack-tutorial-building-a-react-crud-application-from-start-to-finish-part-1/\nこちらも英語です。youtubeにも上がっているけど、ちょっと動画は・・・って方はこちらがイイかも。\n\nMERN Stack Front To Back: Full Stack React, Redux & Node.js\nhttps://www.udemy.com/course/mern-stack-front-to-back/\n英語です。有料のUdemyですが、こちらは実際に作ってみました。ReactもHooks使ったりとモダンに扱っていたため、筆者としてはオススメです。\n\n\nまとめ\n\n実際に作成しようとなった場合、ドキュメントが少ない、そもそも日本語で書かれたMERNのチュートリアルが見つからない、と色々と不安な点はあると感じます。しかし、Javascriptのみで書けるという利点は大きいです。\n\n最近のReactJSは、使用傾向が高いということ\nMicrosoft, Yahooなど、NodeJSの推薦会社が大きいこと\n\nなどを踏まえると、一度自作のアプリケーションを作ってみてもイイかと思います。\n\n\n参考にした資料\n\nWhat is MERN Stack?\nhttps://www.educative.io/edpresso/what-is-mern-stack\nNode.jsのMVCフレームワーク「Express」の基礎知識とインストール (1/3)\nhttps://www.atmarkit.co.jp/ait/articles/1503/04/news047.html#011\n初心者向け！3分で理解するNode.jsとは何か?\nhttps://eng-entrance.com/what-is-nodejs\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F43034006%3Fv%3D4?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=704093bbc12ca4f7283ef8607f3c5f62","name":"/Kojiro-schatten"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F43034006%3Fv%3D4?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=704093bbc12ca4f7283ef8607f3c5f62","name":"/Kojiro-schatten","url":"https://qiita.com//Kojiro-schatten/items/ffb0c213bfc36eae3592"},{"datePublished":"2019-07-29T23:05:30Z","dateModified":"2019-11-02T01:45:18Z","headline":"【3分で分かる】回帰問題と分類問題の違い","articleBody":"これから機械学習を勉強してみたい！と思っている方に向けて書いた記事です。今回は回帰問題と分類問題について説明します。難しい言葉や数式は全く出てこないので安心してください！また、記事の最後にクイズも用意したので、ぜひチャレンジしてみてください。\n\n\n機械学習の種類\n\n機械学習には大きく分けて3つの種類があります。教師あり学習、教師なし学習、強化学習です。この記事では機械学習の中で最も一般的である教師あり学習について扱います。\n\n\n教師あり学習とは？\n\n例えば動物の画像データを大量に用意します。これらの画像データにはそれぞれ動物の種類の名前が正解として紐づけられています(この画像のはイヌ、この画像はネコといったように)。\n\n大量の画像を機械に何度も何度も見せることによって、だんだんとそれぞれの動物の特徴が分かってきます。\nそしてまだ見せていないイヌの画像データを見せたときに、機械は「しっぽがあって、ギザギザの歯があって・・・」と分析して、「これはイヌです！」と答えるようになるのです。\n\nこのようにあらかじめ正解が分かっているデータを分析させて、未知のデータを予測させる手法を教師あり学習と呼びます。\n\nさて、この記事の本題に移りますが、実は教師あり学習には回帰問題と分類問題といった2つの種類があります。この違いについて、さっそく見ていきましょう。\n\n\n回帰問題とは？\n\n例えば次のようなグラフがあったとしましょう。このグラフは、ある土地における温度と湿度の関係を表しています。\n\nもし温度が23℃のとき、湿度はどれくらいになるでしょうか。残念ながら23℃はこのグラフ上にプロットされていないので自分で予想を立てなければいけません。\n図1のように直線を引いた場合は湿度35%、図2のように曲線を引いた場合は湿度37%です。わずかな違いではありますが、湿度の値が線の引き方によって変わりました(もちろん最も良い線の引き方もありますが、今回は省略させていただきます)。\n\nしかしながらどちらも共通していることは、温度が決まれば湿度も必ず決まるということです。線を引いたことによって、温度が17℃のときや34℃のときも湿度を求めることができますよね。これは引いた線がずっと続いていて途切れていないからです(これを連続しているといいます)。\n回帰問題とは連続した数値における予測を行う問題です。\n\n\n分類問題とは？\n\n柴犬の特徴って何でしょうか？体の高さよりも体の長さの方がやや長く、小さな立ち耳で巻き尾、毛の色は茶色や黒色で腹は白色・・・。たくさんありますね。\n大量のイヌの画像で学習した機械に、正解が「柴犬」の画像(機械にとっては未知のデータ)を見せます。最初に「体の大きさ」で判別したとしましょう。大型犬である「ハスキー」や「ゴールデンレトリバー」の可能性が消えます。続いて「しっぽの立ち具合」で判別します。ここで、しっぽが垂れている「ダルメシアン」などの可能性が消えます。・・・。\n\nというように機械は「イヌはこういった特徴がある」ということを学習していて、それに基づいて正解を出します。\n分類問題とは、データがどのグループに属するのか予測する問題です。\n\n\n確認クイズ\n\n次の例は回帰問題、分類問題のどちらかに当てはまるか答えてください。\n去年発売されたパソコンが欲しい。今から数えて3か月後にお金が貯まるので買いたいと思っている。いくらくらいの値段で買えるか予想したい。\n↓\n↓\n↓\n↓\n↓\n↓\n↓\n\n\nクイズの答え\n\n回帰問題\n\n\n\n参考\n『ゼロから作るDeep Learning pythonで学ぶディープラーニングの理論と実装』\n『Coursera Machine Learning』\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F399450%2Fprofile-images%2F1560166894?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=c7f0b2585260ac5aee287c8e603ea701","name":"/potato_revolution"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F399450%2Fprofile-images%2F1560166894?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=c7f0b2585260ac5aee287c8e603ea701","name":"/potato_revolution","url":"https://qiita.com//potato_revolution/items/ff24becc2b8406efd4a4"},{"datePublished":"2018-09-12T11:56:59Z","dateModified":"2018-10-09T04:51:03Z","headline":"git stashはもういらない!　3分で分かるgit worktree","articleBody":"\ngit worktree はstashのいらないbranchのようなものだ。\ngit 2.7から使える。\nbranchを作る代わりに　worktreeという名前のフォルダを作る\n以下のメリットがある。\n・複数のブランチを、別々のエディタで呼び出し、並列的に修正可能。\n・ブランチの切り替えという概念がなくなるため作業効率が上がる。　つまり、git stashの必要がなくなる\n　以下のデメリットがある\n・branchを作るのと違いgitignoreが適用されるため、１設定必要。\n\n\ngit worktreeがエンジニアの生産性を大幅に上げることを証明する。\n\n\n1.まず、作業フォルダを作る。\n\nmkdir workspace; cd workspace\n\n\n\n2. 何かプロジェクトを作成。\n\nreact-native init AwesomeProject; cd AwesomeProject\n\n\n\n3. 以下のコマンドで、branchとworktreeを一緒に作る。\n\ngit worktree add -b Foo ../Foo origin/master\n\n\nFoo = 新しく作られるbranch名\n../Foo = 新しく作られるworktree名\norigin/master = origin/masterからbranchとworktreeを生やす。\n\n現状以下のような構成になっている。\nworkspace\n--AwesomeProject\n----.git\n--Foo (worktree)\n----.git\n\n\n4.Fooフォルダに移動してgitが使えることを確認。\n\ncd ../Foo; git log;\n\n\n試しにFooの中でcommitしてgit pushしてみよう。\n\n以上!!!\n\n実務で使うときは、以下のように、あるプロジェクトのmasterと、そのworktreeだけを含むフォルダを作るといい。\nその際、masterは削除できないように設定しておくともっといい。\nAwesomeProject\n--AwesomeProject　（master）\n----.git\n--Foo (worktree)\n----.git\n--HotFix (worktree)\n----.git\n\n便利なのはworktree間で.git以下のフォルダが同期していること。\nそしてbranchが別々のフォルダにあることでそもそもgit stashをせずに作業が出来ること。\nstashでなく、新しいエディタで、「直接」branchを開ける。\nworktreeを消したい時は、rm -rf Fooだ。\n\nなんて単純ながら革新的だろう。学習コストがほぼいらず、単純に生産性が上がる。\nただ.gitignoreで除外されるファイルはworktreeで同期しない。\n\n\ngitignoreされてしまう。\n\nそう、git worktreeはgitignoreが適用されてしまう。\n\nそれを回避するためにはrsync!\n\ngit worktree add -b Foo ../Foo master; rsync -a --exclude='.git' ../awesomeProject(コピー元のプロジェクトの名前)/ ../Foo\n\n\n解説すると、localのmasterからFooというbranchを切り、Fooというフォルダの中にそのbranchを入れる。\nrsyncは複雑なことができるcpコマンドだ。\nlocalのmasterをFooというフォルダに.git以外のフォルダをコピーする。\n30秒ほどかかるのが欠点。gitignoreされたファイルだけ、選択してコピーするやり方がわかるbashの達人の方がいらっしゃったらコメントしてください。\n\nnpmがインストールされている人は、\nnpx kabatree newBranch\nで上記と同じことをしてくれる。\n（私が制作しているnpmライブラリです。）\n\nもし、git worktreeの仕組みが分からなかったら、worktreeの.gitとmasterの.gitを見てみよう。worktreeは単純な仕組みなので、すぐに理解できる。\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F183835%2Fprofile-images%2F1523083047?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=de9e97dd619bd05b33b198597c5b6200","name":"/kaba"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F183835%2Fprofile-images%2F1523083047?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=de9e97dd619bd05b33b198597c5b6200","name":"/kaba","url":"https://qiita.com//kaba/items/cec65cf994ef3a98d4a8"},{"datePublished":"2019-12-01T09:31:22Z","dateModified":"2019-12-19T13:37:45Z","headline":"3分でわかるセキュリティ","articleBody":"\n\nはじめに\n\nこれは基本情報技術者試験を勉強した際に「セキュリティ意外と面白い」と思ったことがきっかけに書いた記事です。\n僕の専門ではないですm(__)m\n\n(ちなみに僕の専門はReal Time Strategyです)\n\n\nセキュリティの三大要素\n\n単にセキュリティといっても、攻撃の目的などはいくつかあります。多くの人（特にハッカーに憧れる子供とか）は攻撃と言うと情報を盗むことを想像するかもしれません。しかし、それ以外にも情報の改ざん・サービスの停止のために攻撃することもあるのです。\nこれから、情報の漏洩・改ざん・サービスの停止を狙う攻撃について、セキュリティ側が大切にするポイントを見ていきたいと思います。\n\n\n機密性\n\nこれは情報の漏洩がされない、情報が盗み出されないことを示す言葉です。例えば、あなたが今から国のサーバにアクセスして全国民の住所や氏名を入手したとしましょう。これは情報を盗み取っているから国のサーバの機密性は低いといえるでしょう。ほかにも、AさんからBさんへのメールの中身をあなたが盗み見た。これも情報漏洩といえます。\n\nさて、これはどのようにして解決できるでしょうか。例えば、そのデータを暗号化するのはどうでしょうか？　AさんからBさん宛てに出した、暗号化されたメールをあなたが盗み見たとしましょう。中身がわからないのでは情報の盗みようがありません。これで情報の漏洩を防ぐことが出来ます。\n\n\n完全性\n\n次に完全性の話をします。これはデータが改ざんされていないことを示す言葉です。先ほど、あなたはAさんからBさんに宛てられた暗号化されたメールを入手しました。もちろん中身は見られません。しかし、もしも中身を書き換えてBさんに何食わぬ顔で送った場合どうなるでしょう。Bさんは虚偽の情報に踊らされるでしょう。\n\nこの問題点はメールが改ざんされていたことに気づかなかったことに問題があるといえるでしょう。では、このメールに何か約束をつけたとしたらどうでしょうか？　例えば、メール全体の文字列のビットごとの数字の合計を一番最後につけるとか。そのようなルールを知らない場合、せっかくメールを改ざんしてもBさんには気づかれるでしょうね。\n\n\n可用性\n\nこれはサービスが停止をしないことをさす言葉です。数年前、Twitterが「バルス」という言葉で落ちたことはご存じですか？　金曜ロードショーで「天空の城ラピュタ」を上映したところ、多くのTwitter民が主人公の「バルス」のタイミングで「バルス」とツイートしたところ、ラピュタ城と同時にTwitterのサーバも負荷で落ちたそうです。これは可用性に関わる問題です。\n\nこれの対策は・・・\nまあサーバを強化・多重化するのが定番でしょうか(何故か深く書かれていないのです。もしかして対策方法はないのか！？)\n\n教えていただいた方法として、縮小運転があるそうです。提供するサービスの質を下げることでサーバへの負荷を下げて解決することです（要するに手抜き運転・・・）(2019/12/19更新)\n\n\n最後に\n\nいかがでしたか？　とても軽い内容ですが、これがセキュリティで大切にされていることです。単にセキュリティと言わずに何から守りたいか分かっているだけでも、ちょっとだけ自慢げな態度を取れるのではないでしょうか？\n\nちなみに加筆・修正要請があればじゃんじゃん言ってください！\n僕もセキュリティは浅いし、何よりも勉強になりそうです。\n","author":{"http://schema.org/Person":{"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/bb5cc699d3a95ccb8d00624f5d69b73615e21eb8/original.jpg?1511144968","name":"/S-Kaito","memberOf":{"http://schema.org/Organization":{"url":"/organizations/iwate-pu","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/bb5cc699d3a95ccb8d00624f5d69b73615e21eb8/original.jpg?1511144968","legalName":"岩手県立大学","description":"岩手県滝沢市にある公立大学です。Qiitaではソフトウェア情報学部生や出身の人が多いです。"}},"url":"/organizations/iwate-pu","legalName":"岩手県立大学","description":"岩手県滝沢市にある公立大学です。Qiitaではソフトウェア情報学部生や出身の人が多いです。"}},"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/bb5cc699d3a95ccb8d00624f5d69b73615e21eb8/original.jpg?1511144968","name":"/S-Kaito","memberOf":{"http://schema.org/Organization":{"url":"/organizations/iwate-pu","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/bb5cc699d3a95ccb8d00624f5d69b73615e21eb8/original.jpg?1511144968","legalName":"岩手県立大学","description":"岩手県滝沢市にある公立大学です。Qiitaではソフトウェア情報学部生や出身の人が多いです。"}},"url":"https://qiita.com//S-Kaito/items/a579e1de0fd40fa249b7","legalName":"岩手県立大学","description":"岩手県滝沢市にある公立大学です。Qiitaではソフトウェア情報学部生や出身の人が多いです。"},{"datePublished":"2020-03-14T06:18:25Z","dateModified":"2020-03-14T10:28:28Z","headline":"3分でわかるgRPC-Web","articleBody":"\n\ngRPCとは\n\ngRPCの概要を簡単にまとめる。\n\n\nHTTP/2による高速な通信\nIDL(Protocol Buffers)でデータ構造とRPCを定義\n多言語対応のソースコード自動生成\nStreamingを用いた双方向通信が可能\n\n\n詳細は以下へ。\n\n\nWhat is gRPC?\n\n\n\ngRPC-Webとは\n\ngRPC-WebによってgRPC通信をWebでも使うことができる。以上！\n\nといえればいいのだが、実際は、ブラウザの制限にあわせたプロトコルを定義している。\n\n\ngrpc/PROTOCOL-WEB.md at master · grpc/grpc\n\n\nそのため、現時点だと、プロトコル間の微調整を行うためのプロキシが必要で、公式ではEnvoyを推奨していたりする。\n\n\nブラウザの制限\n\n前述したブラウザの制限とは、例えば以下のようなものだ。\n\n\nHTTP/2のフレーミングレイヤーはブラウザに露出されない\nブラウザからのStreamingがまだ不十分 (WHATWG Streams)\nクライアントにHTTP/2の使用を強制できない\nクロスブラウザで動くbase64のようなテキストエンコーディングの必要性\n\n\n上記により、以下のようなことがgRPC-Webでは不可能である。\n\n\ngRPCでサーバーとの「直接」通信 (Proxyを用意する必要がある)\nClient-side & Bi-directional streaming\n\n\n少なくともBi-directional streamingがでできるようになればgRPC-Webの立場はかなり上がると思うので残念だ。\n\n\nメリット\n\n現時点でのgRPC-Webのメリットは以下のようなものがある。\n\n\nクライアントからサーバーまで、一気通貫でgRPCの開発パイプラインに載せられる\nバックエンド・フロントエンド間でタイトな連携ができる\nクライアント向けの「gRPCライブラリ」を容易に生成できる\n\n\n例えば、バックエンドのサービス群がgRPCで構築されている時、HTTPのレイヤーでBFFを用意する必要がなくなり、不要なAPI設計やコミュニケーションをへらすことができるのがメリットになりそうだ。\n\n\ngRPC-Web is Generally Available\n\n\n下の2つは、IDLベースなこととコードの自動生成により、RESTなどで「仕様書ベース」で合意を行うよりも、スムーズな開発ができるということだと理解した。アプローチや思想は異なるが、GraphQLとも一部ゴールを共有しそうだ。\n\n\ngRPC APIの設計\n\nAPI設計のガイドラインをGoogleが用意していたりする。\n\n\nAPI Design Guide | Google Cloud\n\n\n\n使ってみた\n\n実際にgRPC-Webをつかって簡単なチャットを作ってみた↓\n\n\ngRPC-Web + React Hooks + Go でリアルタイムチャットをつくる - Qiita\n\n\n\n参考\n\n\nWhat is gRPC?\n初めてのgRPC - Speaker Deck\ngRPC-Web is Generally Available\nThe state of gRPC in the browser\ngrpc/PROTOCOL-WEB.md at master · grpc/grpc\nAPI Design Guide | Google Cloud\ngRPC WebがGAになったのでそろそろ理解してみる - Qiita\ngRPC-Web + Typescript + GoでHelloWorld - Qiita\n\n","author":{"http://schema.org/Person":{"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/e0a635252dd5df1a39e3eb021f4b99365aa371a3/original.jpg?1481166839","name":"/okmttdhr","memberOf":{"http://schema.org/Organization":{"url":"/organizations/globis","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/e0a635252dd5df1a39e3eb021f4b99365aa371a3/original.jpg?1481166839","legalName":"株式会社グロービス","description":"グロービスは 1992 年の創業以来、社会人を対象とした MBA、人材育成の領域で Ed-Tech サービスを提供し、現在は日本 No.1 の実績があります。これらの資産と、さらに IT や AI を活用することで、アジア No.1 を目指しています。"}},"url":"/organizations/globis","legalName":"株式会社グロービス","description":"グロービスは 1992 年の創業以来、社会人を対象とした MBA、人材育成の領域で Ed-Tech サービスを提供し、現在は日本 No.1 の実績があります。これらの資産と、さらに IT や AI を活用することで、アジア No.1 を目指しています。"}},"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/e0a635252dd5df1a39e3eb021f4b99365aa371a3/original.jpg?1481166839","name":"/okmttdhr","memberOf":{"http://schema.org/Organization":{"url":"/organizations/globis","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/e0a635252dd5df1a39e3eb021f4b99365aa371a3/original.jpg?1481166839","legalName":"株式会社グロービス","description":"グロービスは 1992 年の創業以来、社会人を対象とした MBA、人材育成の領域で Ed-Tech サービスを提供し、現在は日本 No.1 の実績があります。これらの資産と、さらに IT や AI を活用することで、アジア No.1 を目指しています。"}},"url":"https://qiita.com//okmttdhr/items/fb7a8bc0c8afd4e2f4c1","legalName":"株式会社グロービス","description":"グロービスは 1992 年の創業以来、社会人を対象とした MBA、人材育成の領域で Ed-Tech サービスを提供し、現在は日本 No.1 の実績があります。これらの資産と、さらに IT や AI を活用することで、アジア No.1 を目指しています。"},{"datePublished":"2019-12-05T16:30:29Z","dateModified":"2019-12-05T16:35:40Z","headline":"3分でわかるエディタ戦争物語","articleBody":"\n\nエディタ戦争って？\n\n\nエディタ戦争(Editor War)とは、プログラミングを行う人々(特にハッカー文化に属する人々)の間で続いている、どのテキストエディタが一番よいかというテーマの論争を指す。　-wikipediaより抜粋\n\n\nプログラマにとってエディタは手足、エディタは家族、エディタは生命です。どんなエディタを使うか、そしてそれをいかに使いこなすかがプログラマのステータス(自己満足)と言えるでしょう。\n\nこれはそんなエディタをめぐり、長らく続く戦争の記録です。\n\n\nエディタの歴史\n\n\nラインエディタ時代\n\n遥か太古、エンジニアはコマンドによってテキストを編集していました。この頃は世は全て事もなし、人々の心は安泰に包まれていたともいなかったとも言われています。とにかく、大きな争いは起こりませんでした。\nラインエディタではUnixのed系が有名です。\n\n\nスクリーンエディタ\n\nその後、ファイルの内容を画面に表示しながら編集することができるスクリーンエディタが登場しました。そして1970年代にはviとEmacsという二つのエディタが生まれ、現代まで続くエディタ戦争の火種となりました。\n\n\nvi\n\n1976年にビル・ジョイ氏により開発されました。ラインエディタのexを先祖に持ち、コマンド等に根強く残っています。\nviの特徴は以下の通りです\n\n\nモード：\nviにはコマンド、挿入、ビジュアルなど多数のモードがあり、これらを切り替えながら編集します。\nコマンド：コマンドモードでは文字列の挿入、削除、置換等を多数のコマンドを組み合わせて行います。\n軽量：viは他のエディタと比べてコンパクトです。\n\n\n現在はvimという後継が広く普及しており、Unix系OSには大抵の場合このどちらかが標準で入っています。\n\n\nEmacs\n\nEmacsはviの少し前から同時期にMITで開発が始まりました。\n\n\nコマンド：Emacsにはモードが存在せず、コマンドは修飾キー(Ctrlなど)と他のキーの組み合わせで入力されます。\n対応言語：多くの言語(C++等メジャーな言語からウィキペディアページの編集モードまで)がサポートされています。\nカスタマイズ：Lispでエディタをカスタムできる他、拡張機能を入れればwebブラウザやメールまで使えます。\n\n\nこちらも多くの人に広まりましたが、処理系が乱立した結果viほどのまとまりはないです。\n\n\nエディタ戦争開戦\n\nそのうちvi派とEmacs派は、お互いを批判し始めました。\n\n\nvi派の主張\n\n\nviはUNIX系OSには必ず含まれる。\nEmacsはカスタムしすぎて他の環境になった時使いづらいが、viはそうでもない。\nEmacsは十得ナイフであり、機能の多さのせいでリソースを使いすぎる。\n「Emacsは優れたOSだが、優れたエディタだけが足りない。」\nviは修飾キーが無いから腱鞘炎にならない。\n\n\n\nEmacs派の主張\n\n\nviよりコマンドが豊富で、しかもモードに煩わされない。\nLispにより容易に拡張できる。\nEmacsは多くのニーズに応えられる。\n\n\nその後Emacs教会ができたりviカルトができたりして、エディタ界はこの二派で大別されました。\nこれにより情勢は安定されたかのように見えましたが...\n\n\nエディタ戦国時代\n\nvi(とその後継であるvim)もEmacsも、CUI上で使われることが普通でした。\nしかしグラフィカルのウィンドウを持つOSが普及し、今やデスクトップ用途のほぼ全てでGUIが使われています。エディタも例外ではなく、GUI上で動作するものが台頭するようになりました。\n最近では以下の3つがメジャーといえます。\n\n\nAtom\n\nGitHub開発。テーマは\"A hackable text editor for the 21st Century\"\nmacOS、Windows、Linux等で動作し、パッケージをインストールすることで機能をカスタマイズできる。\n\n\nSublime Text\n\nプロプライエタリ(商用)のエディタ。Pythonで開発されているらしい。\nmacOS、Windows、Linux等で動作し、ファイル検索等プロジェクト管理に強い(らしい)。\n\n\nVisual Studio Code\n\nMicrosoft開発。同社のIDEであるVisual Studioのテキストエディタ部分。\nmacOS、Windows、Linux等で動作し、結構早い。\n\n\n現状\n\nプログラミングという行為がコマンドラインで行われるとは限らないのは、今や常識となりました。\nしかしvi(,m)やEmacsを未だ愛用する人も多く、vimは現在でも1位か2位の人気を誇ります。\nこれらの背景には、単純に好き・CUIはどんな環境でも使える・コンパイラやgit等ツールの使用がCUIからの方がやりやすい等の理由があります。\n最早エディタ戦争は、作業環境におけるGUC派とGUI派の代理戦争となったのです(???)\n\n\n感想\n\nvimは慣れるまで苦労したが、コマンドで編集できるのは結構楽だし面白い。まだまだ訓練の余地はあるし、使えば使うほど手に馴染むエディタだ。\nAtomやVS Codeなどはプロジェクト管理やwebサービスとの連携においては最早IDEとの境界も曖昧なくらい高機能だが、テキスト入力についてはコマンドは排除されショートカットくらいしかない。それってnanoと変わらなくね？\nという老害っぽいことを以前話したら、友達に「Atomにも操作をvimっぽくするパッケージあるよ」と言われた。諸行無常。\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F274196%2Fprofile-images%2F1543851186?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=3bae0e692c9fe9c4ea9d54712dec8ae0","name":"/JJ1LIS"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F274196%2Fprofile-images%2F1543851186?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=3bae0e692c9fe9c4ea9d54712dec8ae0","name":"/JJ1LIS","url":"https://qiita.com//JJ1LIS/items/22e406ec26ad1e5c6228"},{"datePublished":"2018-09-08T02:05:28Z","dateModified":"2018-12-13T12:12:53Z","headline":"3分でわかる値オブジェクト","articleBody":"\n\n想定読者\n\n\nクラス設計に悩みを持つ業務アプリケーションエンジニア\n値オブジェクト（Value Object）の概要を理解したい方\n\n\n\nよくあるクラスとその問題点\n\n\nよくあるクラス\n\nJavaやPythonなどのオブジェクト指向言語を使って、あるクラスを作ることにしましょう。以下の例では、タスクをクラスとして表現しており、タスク名、ポイント、及び期限をフィールドとして保持しています。String型やint型を使ったよくあるクラスです。\n\n\nTask.java\nString taskName;\nint point;\nDate dueDate;\n...\n\n\n\n保持する各フィールドに対してgetter/setterメソッドを保持するもよく見かける実装パターンです。\n\n\nTask.java\n    public Point getPoint() {\n        return point;\n    }\n    public void setPoint(Point point) {\n        this.point = point;\n    }\n    ...\n\n\n\n\"よくある\"クラスの特徴を簡単にまとめます。\n\n\nint型やDate型など、言語で用意された型を使用してフィールドが宣言されている\ngetter/setterメソッドが実装されている\n\n\nこのような一般的なクラスの一体何が問題なのでしょうか。\n\n\nよくあるクラスの問題点\n\nさきほど二つの特徴をあげましたが、よくあるクラスにはこれらに関連した大きな問題点があります。それは、業務アプリケーションを作り上げるために存在するクラスであるにも関わらず、「業務ルールに反した値や操作を許す構造になっている」ことです。実際のソースコードを見てみましょう。\n\n\nコードで見てみる問題点\n\n例として、先のクラスのポイント(point)というフィールドを考えることにします。仮に、「ポイントは0から1000までとすること」という業務ルールがあるとしましょう。しかし、Taskクラスにおけるポイントはint型で宣言されていますから、こんなこともできてしまいます。\n\ntask.setPoint(-2000);\n\n\n-2000という業務ルールに反したポイントが設定されています。\nこのようなことを可能にしてしまうと、ビジネスロジック上でバグが生まれやすくなります。さらに言えば、業務ルールから見た論理的なバグであり、プログラムとしてエラーは発生しないため、発見が難しくなってしまうという大きな問題を抱えることになります。\n\n当然、int型やDate型が個別のアプリケーションの業務ルールなんて知るわけないので、業務ルールに反する行為を防ぐことはできません。さらに、setterメソッドを許すことで外部から何の値でも自由に設定できてしまいます。\n\n\n問題解決の方法 -値オブジェクトを使ってみる-\n\n値オブジェクト(Value Object)を私なりの解釈で説明すると、「業務で使う単位や値のルールをクラスとして表現したもの」です。\n\n\nコードで見てみる値オブジェクト\n\n実際のコードを見てみるとなんとなくわかると思います。\nポイントは以下2点です。\n\n\n\n業務ルールを定義する（MIN, MAXなどの制約を明確に宣言する）\n\n業務ルールに反する操作を許容しない（反した場合は例外を投げる）\n\n\n元々はint型に対してsetterで「何でも設定OK」な状態でしたが、業務ルールを無視したsetterは使いません。というか作ってはいけません。値オブジェクトでは、業務ルールに基づいて値が設定されるようなメソッドを作成する必要があります。\n\n例えば、addメソッドを呼び出すと、次にcanAddが呼び出されて業務ルールに反した値（0から10000以外の値）が渡されていないかがチェックされます。問題ないならそのまま新たなPointのインスタンスが生成され、問題ありなら業務ルールに反する値が設定されないように例外が投げられます。\n\n\nPoint.java\npublic class Point {\n\n    static final int MIN = 0;\n    static final int MAX = 10000;\n\n    int value;\n\n    public Point(int value) {\n        if (value < MIN) throw new\n                IllegalArgumentException(\"不正：\" + MIN + \"未満\");\n        if (value > MAX) throw new\n                IllegalArgumentException(\"不正：\" + MAX + \"オーバー\");\n        this.value = value;\n    }\n\n    Point add(Point other) {\n        if (!canAdd(other)) throw new\n                IllegalArgumentException(\"不正：合計が\" + MAX + \"以上\");\n        int added = addValue(other);\n        return new Point(added);\n    }\n\n    boolean canAdd(Point other) {\n        int added = addValue(other);\n        return added <= MAX;\n    }\n\n    private int addValue(Point other) {\n        return this.value + other.value;\n    }\n}\n\n\n\n作成した値オブジェクトPointは、元々のTaskクラスで宣言して使用します。\n\n\nTask.java\n//ポイントのみを値オブジェクトに変えています\nString taskName;\nPoint point;    //元々は[int point;]\nDate dueDate;\n\n\n\nまた、先に述べた\"よくある\"クラスとは違い、値オブジェクトを見るだけで業務ルールの概要が容易に理解できます。\nこのように値オブジェクトは、業務ルールをクラスとして表現することで、バグの混入を防ぐだけでなく仕様理解の助けにもなるという非常に便利な設計方式なのです。\nぜひ今度使ってみてください。\n\n\n注意事項\n\n当記事ではドメイン駆動設計で登場する「値オブジェクト」に関して説明していますが、値オブジェクトの厳密な定義や特質すべてには触れず、概要のみを述べる記事になっています。ご了承ください。\n\n\n参考文献\n\n現場で役立つシステム設計の原則 ~変更を楽で安全にするオブジェクト指向の実践技法\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F212045%2Fprofile-images%2F1523205898?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=635faf77dc66f5d1aacd854116bcde8d","name":"/wanko5296"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F212045%2Fprofile-images%2F1523205898?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=635faf77dc66f5d1aacd854116bcde8d","name":"/wanko5296","url":"https://qiita.com//wanko5296/items/8b470934cdc14f869a91"},{"datePublished":"2018-05-13T11:30:44Z","dateModified":"2019-02-05T15:15:11Z","headline":"3分でわかるMyBatis -MyBatis vs Hibernate-","articleBody":"\n\n想定読者\n\n\nMyBatisという言葉を聞いたことがあるが何者なのか知らない方\nMyBatisを使っているが他と比べて何が違うか知らない方\n\n\n\nMyBatisとは何か\n\nmybatis.orgにはこう書かれています。\n\n\nMyBatis はカスタム SQL、ストアドプロシージャ、高度なマッピング処理に対応した優れた永続化フレームワークです。\n\n\n\n永続化とは何か\n\nHatenaに聞いてみました。\n\n\nファイルやDBなど、プログラム終了後もデータが失われないような場所へのデータ保存を指す\n\n\nオブジェクト指向プログラミングでは、あるクラスのインスタンスを生成し、メソッドを呼び出すことで特定の処理を実行します。例えば、ショッピングサイトであれば、注文やキャンセルなど様々な処理が考えられます。\n\n当然のことならが、各処理の記録をデータとして長期的に記録する必要が出てきます。\nしかし、インスタンスは主記憶装置上に生成されるため、プログラムの終了とともにその内容は消えてしまうのです。ゆえに、プログラムで実行された処理内容をデータベースに保存する処理（永続化）が必要となります。\n\n\n結局MyBatisとは何か\n\n私なりにまとめると以下のようになりました。\nオブジェクト指向言語におけるオブジェクトとデータベースに関する処理との対応づけを容易にする便利ツール\n\nこのようなフレームワークのことをO/Rマッパーといいます。\n\n\nO/Rマッパーとは何か\n\nO/RマッパーとはO/Rマッピングを実現するライブラリやフレームワークのことです。\nweblioに聞いてみました。\n\n\nO/Rマッピングとは、オブジェクト指向言語におけるオブジェクトと、リレーショナルデータベースにおけるレコードとを対照させることである。ここでの「マッピング」とは「対応付ける」というほどの意味である。\n\nO/Rマッピングによって、リレーショナルデータベースのレコードがオブジェクトとして直感的に扱えるようになり、リレーショナルデータベースにアクセスするプログラムを記述する処理を容易にすることが可能となる。\n\n\nMyBatisもO/Rマッパーの一つということになります。\n\n\nコードから読み解くMyBatis\n\nMyBatisではデータベースへの操作(SQL)をXMLに記載してJava側で呼び出します。\n（Annotationも使用できますがここでは省略します）\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"org.mybatis.example.BlogMapper\">\n  <select id=\"selectUser\" resultType=\"User\">\n    select * from Users where id = #{id}\n  </select>\n</mapper>\n\n\nMyBatisスタートガイドをもとに作成\n\nここではユーザーのIDをもとにユーザのデータをデータベースから取得するSQLを記載しています。\nJavaでselectUser(任意のユーザID)を呼び出すことでSQLを実行し、取得した結果をresultTypeで指定したクラス(User)に代入できます。\n\nUserMapper mapper = session.getMapper(UserMapper.class);\nUser user = mapper.selectUser(16280001);\n\n\n\nMyBatisの特徴\n\nMyBatisは、一般的なO/Rマッパーのようにデータベースのテーブル構造とオブジェクトをマッピングするのではなく、SQL文とオブジェクトをマッピングするという特質を持っています。\n\nJava側ではSQLで取得するデータに着目すればよく、テーブル構造を意識する必要がないため柔軟性が高いといえます。\n\n\nHibernateと比較してみる\n\n代表的なO/RマッパーであるHibernateとMyBatisを比較してみましょう。\n\n\n\n\n比較項目\nMyBatis\nHibernate\n\n\n\n\nマッピング\nSQL文とオブジェクト\nテーブル構造とオブジェクト\n\n\nSQL\n手動作成\n自動生成\n\n\n\n\n\nSQLの扱いの違いが意味すること\n\n\n手動生成\n\n\nSQLの細かいチューニングが可能\nSQL文によってはDBMSに依存する（特定のDBMSでしか使えない）\n開発者がSQLを意識する必要がある\n\n\n\n自動生成\n\n\n実際に発行されるSQLが非効率になる恐れがある（＝細かいチューニングが不可能）\n特定のDBMSに依存しない\n開発者はSQLを意識しなくてよい\n\n\nMyBatisを使用するということはSQLをガッツリ書かなければならないということです。\n手間はかかるものの、開発者がSQLを完全にコントロールできるため、開発者が意図した通りのデータ操作を実現することができるのです。\n\n\n最後に\n\nこの記事では、有名なO/Rマッパーの一つであるMyBatisについて説明しました。\nMyBatisの概要だけでもわかっていただけたのであれば幸いです。\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F212045%2Fprofile-images%2F1523205898?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=635faf77dc66f5d1aacd854116bcde8d","name":"/wanko5296"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F212045%2Fprofile-images%2F1523205898?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=635faf77dc66f5d1aacd854116bcde8d","name":"/wanko5296","url":"https://qiita.com//wanko5296/items/d7829f18d4827cecd4f6"},{"datePublished":"2018-12-16T02:15:20Z","dateModified":"2019-02-16T11:31:57Z","headline":"3分でわかるXSSとCSRFの違い","articleBody":"みなさんこんにちは。\nFUJITSU その2 Advent Calendar 2018 17日目の記事担当は私 ゆきはらです。\n\n前回14日目はkeiya-nobutaさんのSphinxの導入とLinux Kernelドキュメントのビルドで、\n18日目はhasunumaさんの富士通サイバーセキュリティーワークショップ(FCSW)2018参戦記となっています。\n\n\nはじめに\n\n\nなぜこのテーマにしたか\n\nWebアプリケーションに対する代表的な攻撃手法としてXSS（クロスサイトスクリプティング）とCSRF（クロスサイトリクエストフォージェリ）というものがあります。\nしかしこの二つ、名前だけでなく攻撃手法も似ていて違いがとてもわかりづらいです。かつて私がセキュリティを勉強していたときもよく混同していました。\n\nそこで、この記事ではXSSとCSRFの仕組みとそれらの違いについてまとめることにしました。\n\n対象とする読者は以下の通りです。\n・若手SE\n・若手Webエンジニア\n・基本/応用技術者試験、登録セキスペ勉強中の方\n\n\n著者は何者か\n\nFUJITSUで業務Webアプリケーションの設計・開発に従事しているSEです。\nセキュリティの専門家ではありません。情報セキュリティスペシャリストは保持しています。\n\n\n注意事項\n\n\n当記事ではXSSおよびCSRFの攻撃手法、事象、対策の一部分を示すのみであり、それらすべてについて言及していません。\nXSSおよびCSRFの攻撃パターンは様々ありますが、今回は攻撃者が不正なURLをTwitterに投稿したものとします。\n記事の内容はすべて個人の見解であり、会社・組織を代表するものではありません。\n\n\n\nXSSとは何か\n\nそれでは本題に入ります。\nまず、そもそもXSSとは一体何なんでしょう。ということで、トレンドマイクロさんに聞いてみました。\n一言でいうと、「ユーザーがWebページにアクセスすることで不正なスクリプトが実行されてしまう脆弱性または攻撃手法」のことです。\n\n\nクロスサイトスクリプティングとは、ユーザのアクセス時に表示内容が生成される「動的Webページ」の脆弱性、もしくはその脆弱性を利用した攻撃方法のことです。動的Webページの表示内容生成処理の際、Webページに任意のスクリプトが紛れ込み、Webサイトを閲覧したユーザ環境で紛れ込んだスクリプトが実行されてしまいます。\n出所：クロスサイトスクリプティング（XSS） (TREND MICRO)\n\n\n\nXSSの全体像\n\n文章より図の方がわかりやすいだろうと思い、XSS攻撃の一連の流れを図にしてみました。\n今回は、攻撃者がTwitterに投稿した怪しげなURLをとあるTwitter利用者がクリックしてしまったケースを想定しています。\n\n【前提】\n・WebアプリケーションにXSS脆弱性が存在する\n\n\n\nXSSによる被害例\n\n\n\n攻撃者による不正ログイン（なりすまし）利用者のCookieが攻撃者の手に渡ることで、Cookie内にある利用者のセッション情報がそのまま使用されてしまい、利用者の名をかたってサービスを使用されてしまう危険性があります。\n\n\n\nXSSへの代表的な対策\n\n\n\nWebページに出力するデータのエスケープ処理Webページの出力に際して特別な意味を持つ文字列（例えば「<」、「&」など）は単なる文字列として出力するようにしましょう。また、エスケープの対象としては、利用者が画面から入力した値はもちろん、外部システムからのデータなどWebページの出力対象となるものは必ずエスケープすることが重要です。\n\n\n\nCSRFとは何か\n\nまたトレンドマイクロさんに聞いてみました。\n一言でまとめると、「Webアプリケーション利用者自身が意図しない処理が実行されてしまう脆弱性または攻撃手法」のことです。\n\n\nクロスサイトリクエストフォージェリ（CSRF）とは、Webアプリケーションに存在する脆弱性、もしくはその脆弱性を利用した攻撃方法のことです。掲示板や問い合わせフォームなどを処理するWebアプリケーションが、本来拒否すべき他サイトからのリクエストを受信し処理してしまいます。\n出所：クロスサイトリクエストフォージェリ（CSRF） (TREND MICRO)\n\n\n\nCSRFの全体像\n\nXSSと同じく、CSRF攻撃の一連の流れを図にしてみました。\n\n【前提】\n・WebアプリケーションにCSRF脆弱性が存在する\n・利用者はWebアプリケーションにログイン済みの状態であり、セッションを保持している\n\n\n\nCSRFによる被害例\n\n\n\n利用者の意図しないWebアプリケーション上の処理実行図でも表したように、本来はログインした利用者のみが許される記事の投稿処理などがあげられます。\n\n\n\nCSRFへの代表的な対策\n\n\n\nFormページ返却時のトークン付与今回の例でいうと、はじめに掲示板への書き込み画面を表示する際にサーバがクライアントに対して特定の文字列（トークン）を設定します。実際に書き込みのリクエストがあった際にサーバーが「この人に送ったトークンと同じトークンがリクエストに入ってる？」と確認することで、攻撃者からの不正なリクエストを防ぐことができます。これは、攻撃者は利用者に送信したトークンの値を知らないためです。\n\n\n\nXSSとCSRFの違い\n\nWebアプリケーションの脆弱性を利用した攻撃という点は一致していますが、XSSとCSRFは何が同じで何が違うのでしょう。\nということで、XSSとCSRFの共通点と違いを表で整理してみました。\nなお、以下の表で「実行」との記載がある場合は、「不正な処理の実行」という意味で解釈してください。\n\n\n\n   観点\n   XSS\n   CSRF\n\n\n   脆弱性の存在箇所\n   Webアプリ\n\n\n   実行契機\n   不正なURLへのアクセス\n\n\n   実行される場所\n   Webブラウザ(Client)\n   Webアプリサーバ(Server)\n\n\n   実行可能な処理\n   基本的に自由*1\n   Webアプリで定義された処理\n\n\n   実行の前提\n   特になし\n   Webアプリにログイン済み*2\n\n\n\n*1 JavaScriptで実行可能な範囲であればという意味です\n*2 Webアプリ利用者（被害者）がCSRF脆弱性を持つWebアプリケーションに対してログイン済みという意味です\n\n\n最後に\n\nこの記事を読んでXSSとCSRFに対する理解が少しでも深まったのであれば幸いです。\n\n弊社のアドベントカレンダーは二つありますのでお時間あるときにぜひお読みください！\nFUJITSU その2 Advent Calendar 2018\nFUJITSU Advent Calendar 2018\n\n\n参考資料\n\n\n\n安全なWebサイトの作り方 （情報処理推進機構）\n\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F212045%2Fprofile-images%2F1523205898?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=635faf77dc66f5d1aacd854116bcde8d","name":"/wanko5296"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F212045%2Fprofile-images%2F1523205898?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=635faf77dc66f5d1aacd854116bcde8d","name":"/wanko5296","url":"https://qiita.com//wanko5296/items/142b5b82485b0196a2da"},{"datePublished":"2017-02-20T15:44:31Z","dateModified":"2017-02-21T23:27:16Z","headline":"3分でわかるデザインパターン入門(GoF)","articleBody":"\n\nはじめに\n\n\n\n『PHPによるデザインパターン入門(秀和システム出版)』という本の読書メモです。\n本で紹介されているオブジェクト指向による設計(デザインパターン)の基本GoF全23パターンのまとめのまとめ。\n具体的例が分かりやすく且つ実用的なので、読んだことないオブジェクト指向初心者は一度目を通すと良いかもです。\n\n\n\nGoF　全23パターン\n\nちなみにGoF(Gang of Four)とはこのデザインパターンを作成した4人組のこと。(花男のF4みたい...)\n難易度と実用度は独断と偏見です。本には書かれていません。\n\n難易度：\n★　　　　理解しやすい\n★★　　　少し複雑だけどちゃんと読めば理解できる\n★★★　　ちゃんと読んだけどいまいち理解できなかった\n\n実用度：\n★　　　　使うのかなコレ\n★★　　　知っておいたら役に立ちそう\n★★★　　よく使っている・使えそう\n\n\n1.Template Method\n\n難易度:★\n実用度:★★★\n処理の一部をサブクラスで実装。よくある継承。\n\n\n2.Singleton\n\n難易度:★\n実用度:★★\n生成するオブジェクトの数を制限する。\n\n\n3.Adapter\n\n難易度:★\n実用度:★★★\nAPIの異なるクラス同士をつなぎ合わせる。継承と移譲の2通りのやり方があるが、基本どちらもAdapterメソッド内でつなぎ合わせ先のメソッドを呼ぶ形になる。\n\n\n4.Factory Method\n\n難易度:★\n実用度:★★★\nクラスの処理(例:csv,xmlファイルを読み込む)とどのクラスを呼ぶか決める。流れは同じだけど、処理(例:それぞれのファイルの読み込み方)がものによって別のものに使える。\n\n\n5.Facade\n\n難易度:★\n実用度:★★★\nファサード。仏語で窓口。クラス同士の複雑な関係を意識しなくていいように、窓口を一つ与える。\n\n\n6.Iterator\n\n難易度:★★★\n実用度:★★\n不規則な多次元配列でも、内部構造を意識せずにそれぞれの要素にアクセスできる。\nphpならSPLの機能のIteratorインターフェース等を継承させる。\n\n\n7.Abstract Factory\n\n難易度:★★\n実用度:★★★\n例えば扱うデータがDBかMOCKか最初に宣言すれば、あとは芋づる式にそれぞれの処理のクラスが使われるようになる。\n\n\n8.Bridge\n\n難易度:★★\n実用度:★★★\n機能(例:ボタンを押す)と実装(例:押したらクイックソートされる)を分ける。\nインターフェースが利用者に提供するAPIを定義することで機能と実装の橋渡しがされる。\n\n\n9.Builder\n\n難易度:★\n実用度:★★★\n異なる材料(例:読み込ませるファイル)だが同じ手順(open,read,close)でオブジェクトを生成させる。\n\n\n10.Chain of Responsibility\n\n難易度:★★\n実用度:★★★\nよくやるフォームのバリデーションみたいな。オブジェクト同士の結びつきを緩める。\n\n\n11.Command\n\n難易度:★★\n実用度:★★\n要求に対する受付と処理を切り離して実装できる。またクラスに実装したコマンド結果を保持させているので、UndoやRedoもできる。\n\n\n12.Composite\n\n難易度:★★\n実用度:★★\n木構造を表す。単一のオブジェクトとオブジェクトの集合体を混ぜてアクセス方法を同じに。(例:組織とそれに属する社員を表示させる。)\n\n\n13.Decorator\n\n難易度:★★\n実用度:★\n基本となるものに様々な機能を付け加えていく。追加する側のクラスが、される側のクラスのインスタンスを保持しているため、ユーザー側は追加機能が加えられていようがいなくまいが同一視して扱える。(例：入力した文字を加工し表示する)\n\n\n14.Flyweight\n\n難易度:★\n実用度:★★★\n一度インスタンス化したオブジェクトを、生成時に読み込んだ内容を保持させることでオブジェクトを使い回す。生成されるオブジェクトの時間やリソースが抑えられる。ただし、使い回して良いオブジェクトは環境によって変化しないものに限る。\n\n\n15.Interpreter\n\n難易度:★★\n実用度:★\n字句解析(文字列を意味ある字句に分解)と構文解析(分解した字句それぞれが文法に従っているかチェック)を行った構文木を処理するパターン。ミニ言語とか作れてしまう。\n\n\n16.Mediator\n\n難易度:★★★\n実用度:★\nオブジェクト同士の依存や関係を把握・仲介してくれるもの(例：ユーザーとチャットルームの管理)\n\n\n17.Mement(Snapshot)\n\n難易度:★★★\n実用度:★\nある時点でのオブジェクトの中身を記憶し、あとで思い出せるようにする。\n\n\n18.Observer\n\n難易度:★★\n実用度:★★\nあるオブジェクトの状態が変化した時に、関係する他のすべてのオブジェクトに通知とそれに応じた処理を行わせる。\n\n\n19.Prototype\n\n難易度:★\n実用度:★★\nインスタンスをコピーして新しいインスタンスを生成する。深いコピーと浅いコピー(中身のオブジェクトも複製するか否か)がある。\n\n\n20.Proxy\n\n難易度:★★\n実用度:★★\n身代わりとなるオブジェクトを通じて、目的のオブジェクトにアクセスさせる。\n\n\n21.State\n\n難易度:★\n実用度:★★\n状態をクラスで表し、状態ごとに振る舞いを切り替えられるようにする。\n\n\n22.Strategy\n\n難易度:★★\n実用度:★★\nパターンごとの処理のクラスを用意。それにアクセスするための処理を書いたクラスを用意。\n\n\n23.Visitor\n\n難易度:★★★\n実用度:★\nデータ構造とそれに対する処理(操作がデータ構造を渡り歩く)を別々にする。\n\n\nおわりに\n\n思い出すきっかけになれば。\n","author":{"http://schema.org/Person":{"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/bcad6f85ec5daa370d3aa04beb486d21af656b86/original.jpg?1452249526","name":"/rch1223","memberOf":{"http://schema.org/Organization":{"url":"/organizations/iridge","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/bcad6f85ec5daa370d3aa04beb486d21af656b86/original.jpg?1452249526","legalName":"iRidge, Inc.","description":"O2OやFinTechソリューションの企画・開発・運用をしています。"}},"url":"/organizations/iridge","legalName":"iRidge, Inc.","description":"O2OやFinTechソリューションの企画・開発・運用をしています。"}},"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/bcad6f85ec5daa370d3aa04beb486d21af656b86/original.jpg?1452249526","name":"/rch1223","memberOf":{"http://schema.org/Organization":{"url":"/organizations/iridge","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/bcad6f85ec5daa370d3aa04beb486d21af656b86/original.jpg?1452249526","legalName":"iRidge, Inc.","description":"O2OやFinTechソリューションの企画・開発・運用をしています。"}},"url":"https://qiita.com//rch1223/items/5ab98d4bf3430937013c","legalName":"iRidge, Inc.","description":"O2OやFinTechソリューションの企画・開発・運用をしています。"},{"datePublished":"2017-01-11T07:49:00Z","dateModified":"2017-01-13T04:12:13Z","headline":"３分でわかる基本の関数型インタフェース","articleBody":"\n\nはじめに\n\nこの記事は基本の関数型インタフェースの実装例を紹介した記事です。\n\n普通はラムダ式で実装したり、Streamの中で使ったりすると思いますが、単純にするためにあえてそのへんを使わずにおなじみのメソッドを使っています。\n\n\"メソッドが変数に入る\"っていう感覚をつかめればいいなぁと思って。（厳密にはクラスですが）\n\njava.util.functionパッケージには４３の関数型インタフェースが定義されていますが、まず抑えておくべきは基本の４つです。この４つ以外は、これらの拡張型だと思っといて問題ないです。\n\n\nSupplier\n\n何かを持ってて、与えてくれる人。抽象メソッドはget。引数なし、戻り値あり。\n\nimport java.time.LocalDateTime;\nimport java.util.function.Supplier;\n\npublic class Main {\n    public static void main(String[] args) {\n        Supplier<LocalDateTime> s = LocalDateTime::now;\n        System.out.println(s.get()); // -> 2017-01-11T16:29:08.086\n    }\n}\n\n\n\nConsumer\n\nもらったものを処理する人。抽象メソッドはaccept。引数あり、戻り値なし。\n\nimport java.util.function.Consumer;\n\npublic class Main {\n    public static void main(String[] args) {\n        Consumer<String> c = System.out::println;\n        c.accept(\"test\"); // -> test\n    }\n}\n\n\n\nPredicate\n\nもらったものの真偽を返す人。抽象メソッドはtest。引数あり、戻り値あり（Booleanのみ）。\n\nimport java.util.function.Predicate;\n\npublic class Main {\n    public static void main(String[] args) {\n        Predicate<String> p = \"\"::equals;\n        System.out.println(p.test(\"foo\")); // -> false\n    }\n}\n\n\n\nFunction\n\nもらったものを加工して返す、いわゆる関数。抽象メソッドはapply。引数あり、戻り値あり。\n\nimport java.util.function.Function;\n\npublic class Main {\n    public static void main(String[] args) {\n        Function<String, Integer> f = Integer::parseInt;\n        System.out.println(f.apply(\"55\") + 45); // -> 100\n    }\n}\n\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F33169%2Fprofile-images%2F1473760660?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=ab5a657fbf34f96c3a33fdb7ca90258e","name":"/Takmiy"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F33169%2Fprofile-images%2F1473760660?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=ab5a657fbf34f96c3a33fdb7ca90258e","name":"/Takmiy","url":"https://qiita.com//Takmiy/items/2a43dbc5ca09017b831e"},{"datePublished":"2019-12-19T16:43:43Z","dateModified":"2019-12-20T22:02:10Z","headline":"3分でわかるNIST CSF（サイバーセキュリティフレームワーク）","articleBody":"この記事は NewsPicks Advent Calendar 2019 の21日目の記事です。\n\n\n\nNewsPicksでエンジニアをしている@betchiです。\n\n最近セキュリティに関連するお仕事の割合が増えてきているので、この記事ではNIST(米国国立標準技術研究所)が公開しているサイバーセキュリティーフレームワークについて書きます。ここ数年でセキュリティフレームワークのデファクトスタンダード（グローバルで）となりつつあるので興味はあるけどドキュメント見る程ではないという方に是非読んで頂ければと思います。\n\n\nNISTとは\n\n米国国立標準技術研究所の略称であり、米国の技術や産業、工業などに関する規格標準化を行っている政府機関です。暗号技術の研究でも有名です。\n\n\nサイバーセキュリティフレームワークとは\n\nNISTの情報技術研究所（ITL）のコンピューターセキュリティ部門（CSD）が2014年2月19日に公開した「Framework for Improving Critical Infrastructure Cybersecurity」の事です。\nその後、改訂版が2018年4月16日に「Framework for Improving Critical Infrastructure Cybersecurity Version 1.1」が公開されました。\n本記事ではこのver1.1の内容を紹介していきます。\n\nこのフレームワークは米国大統領令13636号「重要インフラのサイバーセキュリティの改善」を受けて策定されたものです。\n\nなお日本の組織であるIPA(情報処理推進機構)では「重要インフラのサイバーセキュリティを改善するためのフレームワーク」というタイトルで和訳されています。\n\nこれだと長いので一般的には「サイバーセキュリティフレームワーク」と言われています。すごく一般的な用語だと感じるのですが、ネットで検索してもNISTのものしかヒットしないのでサイバーセキュリティフレームワークと言えば通じるようです。\n\nIPAではサイバーセキュリティフレームワーク以外にもNISTの文書を和訳しており以下のページに各文書へのリンクがはられています。サイバーセキュリティフレームワークはページの下の方にある「その他のNIST文書」にあります。\n\nIPA - セキュリティ関連NIST文書\n\n\n\n\n特徴\n\n\n全ての組織において万能なフレームワークというわけではない\n\nこのフレームワークはセキュリティに関して全ての組織において万能なアプローチではないと名言しています。組織によって異なるリスクがあり、このリスクをマネジメントする為に必要な対策を判断し、優先順位を決め、限られたコストの中で費用対効果を最大化する事が適切であるというスタンスです。\n\n\nセキュリティに関する指針や管理手法を示すだけ\n\nよって、このフレームワークでは具体的なセキュリティ対策については定義しておらず、セキュリティに関する指針や管理手法を示すだけとなっています。具体的なセキュリティ対策についてはリファレンスとして紹介されるかたちになっているので、自分たちの組織に合わせたものを選択する事が重要になります。ちなみに具体的な対策例としてはNISTのSP800シリーズのドキュメントに記載されています。こちらもIPAが和訳しています。\n\n\n継続的に内容が見直されている\n\nフレームワークの内容については多くの専門家の意見を取り入れることで、サイバーセキュリティ対策としての網羅性や鮮度が継続的に保たれており、数年後に陳腐化するという事にはならなそうです。\n\n\n\n\nISMS(情報セキュリティマネジメントシステム)との関連性\n\n日本国内でセキュリティと言えばよくISMSが出てきますが、これとの関連性を説明します。\nこのフレームワークは前述した通り具体策が定義されているわけではなく、具体的なセキュリティ管理策としてISMSが参考情報として紹介されていたりします。よってISMSと相反するわけではないという事です。\n\n扱っている内容の差分としてはISMSではリスクの識別や防御といった予防を重視した内容となっていますが、サイバーセキュリティフレームワークではそれだけでなく攻撃を受けたときの検知、対応、復旧といった事後対応にも多く言及しています。\n\n\n\n\n米国での利用率\n\nこのフレームワークは米国の民間企業の約30%で利用され、2020年までに50%に達すると予測されているようです。(参考)\n\n文書内に「規模に関係なく、企業、政府機関、非営利組織で利用することができる」と記載されておりどんな組織にも適用できるフレームワークとなっているので、日本国内でも活用する企業が増えてきているようです。\n\n\n\n長くなりましたが実際のフレームワークの内容については3つの構成で成り立っており、それぞれ説明していきたいと思います。\n\n\nフレームワークを構成する3つの要素\n\nサイバーセキュリティフレームワークは以下の3要素で構成されています。\n\n\nフレームワークコア\nフレームワークインプリメンテーションティア\nフレームワークプロファイル\n\n\n１つずつ説明していきます。\n\n\nフレームワークコア\n\n5つのリスク管理機能、23のカテゴリ、108のサブカテゴリからなり、サブカテゴリ別に参考情報が纏められています。参考情報にはリスク管理機能を支援するための実施手順やセキュリティ管理策が纏められており、何を利用するのか、もしくはしないのかというのは組織に委ねられています。\n\n本記事では概要に留めるため、機能とカテゴリのみ以下の表に纏めておきます。これを見るだけでもセキュリティ対策って何を考えたら良いのか？というもやもやが解決します。\n\n\n\n\n機能\nカテゴリ\n内容\n\n\n\n\n識別(ID)\n資産管理(ID.AM)\n自組織が事業目的を達成することを可能にするデータ、人員、デバイス、システム、施設が、識別され、組織の目的と自組織のリスク戦略における相対的な重要性に応じて管理されている\n\n\n\nビジネス環境(ID.BE)\n自組織のミッション、目標、利害関係者、活動が、理解され、優先順位付けが行われている。この情報は、サイバーセキュリティ上の役割、責任、リスクマネジメント上の意思決定を伝えるために使用されている\n\n\n\nガバナンス(ID.GV)\n自組織に対する規制、法律、リスク、環境、運用上の要求事項を、管理し、モニタリングするためのポリシー、手順、プロセスが理解されており、経営層にサイバーセキュリティリスクについて伝えている\n\n\n\nリスクアセスメント(ID.RA)\n自組織は、(ミッション、機能、イメージ、評判を含む)組織の業務、組織の資産、個人に対するサイバーセキュリティリスクを把握している\n\n\n\nリスクマネジメント戦略(ID.RM)\n自組織の優先順位、制約、リスク許容度、想定が、定められ、運用リスクに対する意思決定を支援するために利用されている\n\n\n\nサプライチェーンリスクマネジメント(ID.SC)\n自組織の優先順位、制約、リスク許容度、想定が、定められ、サプライチェーンリスクマネジメントに関連するリスクに対する意思決定を支援するために利用されている。自組織は、サプライチェーンリスクを識別し、分析・評価し、管理するためプロセスを定め、実装している\n\n\n防御(PR)\nアイデンティティ管理とアクセス制御(PR.AC)\n物理的・論理的資産および関連施設へのアクセスが、認可されたユーザ、プロセス、デバイスに限定されている。また、これらのアクセスは、 認可された活動およびトランザクションに対する不正アクセスのリスクアセスメントと一致して、管理されている\n\n\n\n意識向上およびトレーニング(PR.AT)\n自組織の人員およびパートナーは、関連するポリシー、手順、契約に基づいた、サイバーセキュリティに関する義務と責任を果たせるようにするために、サイバーセキュリティ意識向上教育とトレーニングが実施されている\n\n\n\nデータセキュリティ(PR.DS)\n情報と記録(データ)が、情報の機密性、完全性、可用性を保護するための自組織のリスク戦略に従って管理されている\n\n\n\n情報を保護するためのプロセスおよび手順(PR.IP)\n(目的、範囲、役割、責任、経営コミットメント、組織間の調整について記した)セキュリティポリシー、プロセス、手順が、維持され、情報システムと資産の防御の管理に使用されている\n\n\n\n保守(PR.MA)\n産業用制御システムと情報システムのコンポーネントの保守と修理が、ポリシーと手順に従って実施されている\n\n\n\n保護技術(PR.PT)\n技術的􏰆セキュリティソリューションが、関連するポリシー、手順、契約に基づいて、システムと資産のセキュリティとレジリエンスを確保するために管理されている\n\n\n検知(DE)\n異常とイベント(DE.AE)\n異常な活動は、検知されており、イベントがもたらす潜在的な影響が、把握されている\n\n\n\nセキュリティの継続的なモニタリング(DE.CM)\n情報システムと資産は、サイバーセキュリティイベントを識別し、保護対策の有効性を検証するため、モニタリングされている\n\n\n\n検知プロセス(DE.DP)\n検知プロセスおよび手順が、異常なイベントに確実に気付くために維持され、テストされている\n\n\n対応(RS)\n対応計画の作成(RS.RP)\n対応プロセスおよび手順が、検知したサイバーセキュリティインシデントに対応できるように実施され、維持されている\n\n\n\nコミュニケーション(RS.CO)\n対応活動が、内外の利害関係者との間で調整されている(例:法執行機関からの支援)\n\n\n\n分析(RS.AN)\n分析は、効果的な対応を確実にし、復旧活動を支援するために実施されている\n\n\n\n低減(RS.MI)\n活動は、イベントの拡大を防ぎ、その影響を緩和し、インシデントを解決するために実施されている\n\n\n\n改善(RS.IM)\n組織の対応活動は、現在と過去の検知/対応活動から学んだ教訓を取り入れることで改善されている\n\n\n復旧(RC)\n復旧計画の作成(RC.RP)\n復旧プロセスおよび手順は、サイバーセキュリティインシデントによる影響を受けたシステムや資産を復旧できるよう実行され、維持されている\n\n\n\n改善(RC.IM)\n復旧計画およびプロセスが、学んだ教訓を将来の活動に取り入れることで改善されている\n\n\n\nコミュニケーション(RC.CO)\n復旧活動は、内外の関係者(例:コーディネーティングセンター、インターネットサービスプロバイダ、攻撃システムオーナー、被害者、他組織のCSIRT、ベンダ)との間で調整されている\n\n\n\n\n\nフレームワークインプリメンテーションティア\n\n組織が現状どの程度達成できているかを数値化するための成熟度評価基準として以下の4段階のティアを定義しています。これをカテゴリ別に定義していきます。\n\n必ずしも全てにおいてティア4を目指すことが正解ではなく、組織のビジネス上の要求事項、リスクの許容度、割当て可能なリソースに応じて、カテゴリー毎に目指すべきティアを設定する事が重要です。\n\n\n\n\nティア\n定義(概要)\n\n\n\n\nティア1: 部分的である(Partial)\nサイバーセキュリティリスクが適切に管理されておらず、リスクは場当たり的に、場合によっては事後に対処される状態\n\n\nティア2: リスク情報を活用している(Risk Informed)\nサイバーセキュリティリスク意識はあるが、リスクを管理するための組織全体にわたる取り組みは定められていない状態\n\n\nティア3: 繰り返し適用可能である(Repeatable)\nリスクの変化に効果的に対応するための一貫した手法が存在しており、従業員は割り当てられた役割、責任を果たすための知識とスキルを持っている状態\n\n\nティア4: 適応している(Adaptive)\n発生する可能性のあるサイバーセキュリティイベントに対処するためのリスク情報を活用したポリシー、プロセス、手順を用いた組織全体のサイバーセキュリティリスクマネジメントのアプローチが確立されており、意思決定の際にはサイバーセキュリティリスクと組織の目的の間の関係が明確に理解され、考慮されている状態\n\n\n\n\n\nフレームワークプロファイル\n\nビジネス上の要求事項、リスク許容度、割当可能なリソースに基づいて調整された機能、カテゴリ、サブカテゴリを纏めたものです。\n\n具体的なサイバーセキュリティ対策の現在の状態と目指す目標の状態を記述する事で必要なギャップを浮き彫りにする事でこのギャップを埋める為の行動計画を立てやすくする事が目的です。\n\nなお、プロファイルの形式は定義されていないので各組織で決める必要があります。\n\n\nまとめ\n\nシステムにおいて稼働率100%を達成することが非現実的であり目指すべきものではないというのと同じ様に、この不確実性の多い世の中においてセキュリティ面でもインシデント発生率を0%にする事を目指すべきではなく、組織のビジネス上の要求事項、リスクの許容度、割当て可能なリソースに合わせたゴールを決め、そこに向かって行動し、そのプロセスを定期的に見直す事が重要だと思います。\n\nセキュリティ対策について考えなければいけなくなった時に、経験のない人がゼロから独自で考えて脆弱なセキュリティ対策を実施する、という誰にとっても意味がない事をしない為にも指針としてこういったフレームワークを適用するべきだと思います。\n\n明日は@takehiloさんの記事です、お楽しみに！！\n","author":{"http://schema.org/Person":{"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/17fd29e33f9ce5c256abbec42af785b2a5f827b9/original.jpg?1469690184","name":"/betchi","memberOf":{"http://schema.org/Organization":{"url":"/organizations/uzabase","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/17fd29e33f9ce5c256abbec42af785b2a5f827b9/original.jpg?1469690184","legalName":"株式会社ユーザベース","description":"企業活動の意思決定を支える情報インフラの提供"}},"url":"/organizations/uzabase","legalName":"株式会社ユーザベース","description":"企業活動の意思決定を支える情報インフラの提供"}},"image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/17fd29e33f9ce5c256abbec42af785b2a5f827b9/original.jpg?1469690184","name":"/betchi","memberOf":{"http://schema.org/Organization":{"url":"/organizations/uzabase","image":"https://s3-ap-northeast-1.amazonaws.com/qiita-organization-image/17fd29e33f9ce5c256abbec42af785b2a5f827b9/original.jpg?1469690184","legalName":"株式会社ユーザベース","description":"企業活動の意思決定を支える情報インフラの提供"}},"url":"https://qiita.com//betchi/items/268a2f04838f28240b8c","legalName":"株式会社ユーザベース","description":"企業活動の意思決定を支える情報インフラの提供"},{"datePublished":"2019-12-28T19:22:55Z","dateModified":"2019-12-29T15:42:46Z","headline":"【初心者向け】3分でわかるGoogle Cloud Datastoreのデータ構造とCRUD処理","articleBody":"遅くなりましたが、この記事は 色んなデータストア触ってみる Advent Calendar 2019 の25日目の記事です。\n\n\nはじめに\n\nGoogle Cloud Datastoreとは、Google Cloud Platform(GCP)上で提供されている、キー・バリュー型のNoSQLデータベースです。\n※ NoSQLの詳細はこちらが参考になると思います。\nNoSQLについて勉強する。\n\n初めてCloud Datastoreを触る機会がありデータ構造の理解に苦戦したので、今までよく使っていたSQLと比較して、データ構造についてまとめてみました。\nまた、クエリもCloud DatastoreのAPIが複数あり、どれを使うべきか悩んでいたので、それぞれのAPIの違いについてもプログラム例を交えて記載しています。\n\nCloud Datastoreを初めて触るときとかに参考になればと思います。\n\n(途中のプログラム例はpythonで書いていますのでご了承ください。)\n\n\n用語\n\nRDBとCloud Datastoreの用語の対応表です。\nCloud Datastoreにしかない概念とかは後述します。\n\n\n\n\nRDB\nCloud Datastore\n\n\n\n\nSchema\nNamespace\n\n\nTable\nKind\n\n\nRow\nEntity\n\n\nColumn\nProperty\n\n\nPrimary key\nKey\n\n\n\n\n\nデータ構造\n\n下図は、Namespace(Tasks)とKind(User, Project, Task), Entityの関係の概念図です。\n大枠はRDBと変わりないように見えますが、Entity間の関係性などが少しややこしいのでその辺りについて後述します。\n\n\n\nエンティティグループ\n\n各エンティティ間は階層構造をしており、ルートエンティティ（下図でいうUserのエンティティ）とその配下に紐づいているエンティティのまとまりをエンティティグループといいます。\n\n\n\n祖先パス\n\nエンティティグループのルートエンティティから始まり、親から子を経由して対象のエンティティに至るまでの連なりを、エンティティの祖先パスといいます。\n各エンティティは祖先パスをキーとして、親となるエンティティを指定できます。\n上図の左下のエンティティでいうと、祖先パスは[User:'1827464394', Project:'A', Task:'blog']になります。\n\n\nエンティティグループの利点と注意点\n\n祖先パスを用いたエンティティグループ内のクエリでは、最後に更新された値が返されることが保証される(強整合性)という利点があります。\n下図のように、各データセンターに分散されたエンティティでも、エンティティグループ内では常に同期されるようになっているためです。\n\n\nただし、注意点として、同じエンティティグループに対する更新は1秒間に1回と制限されています。\nエンティティグループに対してこの制限を超える回数の更新を行った場合、同期によるレイテンシ(遅延)が増加し、タイムアウトになってパフォーマンスが低下します。\nつまり、エンティティグループは更新頻度と強整合性の必要性を考慮した上で設計する必要があります。\n\n\nトランザクション\n\nエンティティグループ内では強整合性が保たれると前述しましたが、複数のエンティティグループ間で強整合性が必要になる場合はトランザクションを用います。\nトランザクションは最大25個のエンティティグループに対して強整合性を保つことができます。\n\n\nエンティティの特徴\n\nRDBのレコードと異なるエンティティの特徴としては次のようなものがあります。\n\n\n同じ Kind のエンティティが異なるプロパティを持つ場合がある\n別々のエンティティが同じ名前のプロパティを持ちながら、値の型は異なる場合がある\n\n\n\n\n\nさまざまなクエリ\n\nGoogle Cloudで提供されているクエリにはさまざまなAPIがあり、それぞれの特徴を理解して適切なAPIを選択する必要があります。\n\n\n強整合性が保たれるクエリは？\n\nそれぞれのAPIで強整合性か否かが異なるため、下記に整合性についてまとめています。\n結論から言うと、強整合性が必要な場合は、祖先クエリまたはキーによる検索を用いる必要があります。\n\n\n\n\nCloud Datastore API\nエンティティ値の読み取り\nインデックスの読み取り\n\n\n\n\nグローバルクエリ\n結果整合性\n結果整合性\n\n\nキーのみのグローバルクエリ\nなし\n結果整合性\n\n\n祖先クエリ\n強整合性\n強整合性\n\n\nキーによる検索\n強整合性\nなし\n\n\n\n\n＜補足＞\n強整合性：データの更新の際にデータベースをロックすることによって、常に最新の値を返すことが保証される\n結果整合性：データの更新でデータベースがロックされることはないため、データが同期されるまでは返される値が最新でない場合がある\n\n4種のAPIそれぞれについて、エンティティグループの図の左下のエンティティを取得するプログラム例を交えて説明します。\n\n\nグローバルクエリ\n\n祖先を指定しないクエリ。結果整合性のため強整合性は担保されません。\n\nfrom google.cloud import datastore\nclient = datastore.Client()\n\nquery = client.query(kind='Task')\nquery.add_filter('task', '=', 'post a blog')\n\n# 一部のプロパティのみ取得する場合(射影クエリ)\n# query.projection = ['task', 'status']\n\n# 複数件取得する際に並び替えする場合\n# query.order = ['created_at']\n\nentities = list(query.fetch())\n\n\n\nキーのみのグローバルクエリ\n\nクエリに一致するエンティティの\"キーのみ\"が返されるグローバルクエリ。\n結果整合性で機能するため、強整合性は担保されません。\n\nquery = client.query(kind='Task')\nquery.add_filter('task', '=', 'post a blog')\nquery.keys_only()\nentities = list(query.fetch())\n\n\n\n祖先クエリ\n\n祖先パスを指定したエンティティグループに対するクエリで、強整合性があります。\n\nancestor = client.key('User', '1827464394', 'Project', 'A', 'Task', 'blog')\nquery = client.query(ancestor=ancestor)\nentities = list(query.fetch())\n\n\n\nキーによる検索\n\nキーによって指定されたエンティティが返されるクエリで強整合性があります。\nただ、条件で絞ったりするフィルタリングはできません。\n\nkey = client.key('User', '1827464394', 'Project', 'A', 'Task', 'blog')\nentity = client.get(key)\n\n\n\nエンティティのCRUD\n\nこれまでは取得のクエリしか触れてこなかったので、作成・更新・削除を含めたCRUD処理をまとめておきます。\nキーを指定して各エンティティもしくは複数のエンティティに対して処理する方法です。\n(簡単のためキーは単純なキーにしています。)\n\n\n作成\n\n一つのエンティティの作成\n\nkey = client.key('Task', 'write a qiita')\ntask = datastore.Entity(key)\ntask.update({\n  'status': 'Doing'\n  'date': '20191231'\n})\nclient.put(task)\n\n\n複数エンティティの作成\n\nkey1 = client.key('Task', 'write a qiita')\nkey2 = client.key('Task', 'read a book')\n\ntask1 = datastore.Entity(key1)\ntask2 = datastore.Entity(key2)\n\ntask1.update({\n  'status': 'Doing'\n  'date': '20191224'\n})\ntask2.update({\n  'status': 'Todo'\n  'date': '20191231'\n})\n\nclient.put_multi([task1, task2])\n\n\n\n取得\n\n一つのエンティティの取得（キーによる検索）\n\nkey = client.key('Task', 'write a qiita')\ntask = client.get(key)\n\n\n複数エンティティの取得\n\nkey1 = client.key('Task', 'write a qiita')\nkey2 = client.key('Task', 'read a book')\ntasks = client.get_multi([key1, key2])\n\n\n\n更新\n\n一つのエンティティの更新\n\nkey = client.key('Task', 'write a qiita')\ntask = client.get(key)\ntask['status'] = 'Done'\n# 全プロパティを更新する場合\n# user.update({\n#   'status': 'Done',\n#   'date': '20191225'\n# })\nclient.put(task)\n\n\n複数エンティティの更新\n\nkey1 = client.key('Task', 'write a qiita')\nkey2 = client.key('Task', 'read a book')\n\ntask1 = datastore.Entity(key1)\ntask2 = datastore.Entity(key2)\n\ntask1['status'] = 'Done'\ntask2['status'] = 'Doing'\n\nclient.put_multi([task1, task2])\n\n\n\n削除\n\n一つのエンティティの削除\n\nkey = client.key('Task', 'write a qiita')\nclient.delete(key)\n\n\n複数エンティティの削除\n\nkey1 = client.key('Task', 'write a qiita')\nkey2 = client.key('Task', 'read a book')\ntasks = client.delete_multi([key1, key2])\n\n\n\n最後に\n\nCloud Datastoreマスターへの第一歩としては、エンティティグループの概念の理解が重要になってきます。\nここで紹介したものだけでなく、Cloud Datastoreのpythonライブラリも複数あるので、今後はそれらの違いとかも試してみたいです。\n何かご指摘などあればコメントいただければと思います。\n\n\n参考\n\nGoogle Cloud公式ページ\nhttps://cloud.google.com/datastore/docs/\n\nGoogle Cloud Datastore API公式ドキュメント(Python)\nhttps://googleapis.dev/python/datastore/latest/index.html\n\nGoogleが公開している論文\n\"Megastore: Providing Scalable, Highly Available Storage for Interactive Services\" \nhttp://cidrdb.org/cidr2011/Papers/CIDR11_Paper32.pdf\n","author":{"http://schema.org/Person":{"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fs3-ap-northeast-1.amazonaws.com%2Fqiita-image-store%2F0%2F248414%2F890a6ab326433017b7dfae0a49cb24595a2e9722%2Fx_large.png%3F1576130851?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=fb72fb59214b3a4f49e46424b9cfe236","name":"/miyuuuu"}},"image":"https://qiita-user-profile-images.imgix.net/https%3A%2F%2Fs3-ap-northeast-1.amazonaws.com%2Fqiita-image-store%2F0%2F248414%2F890a6ab326433017b7dfae0a49cb24595a2e9722%2Fx_large.png%3F1576130851?ixlib=rb-1.2.2&auto=compress%2Cformat&lossless=0&w=75&s=fb72fb59214b3a4f49e46424b9cfe236","name":"/miyuuuu","url":"https://qiita.com//miyuuuu/items/c9846ccdad9aee7c733c"}]